name: Terraform Destroy

on:
  issues:
    types: [opened]

permissions:
  id-token: write
  contents: read
  issues: read

jobs:
  check_issue:
    runs-on: ubuntu-latest
    outputs:
      should_destroy: ${{ steps.check_title.outputs.should_destroy }}
      resource_group_name: ${{ steps.parse_issue.outputs.resource_group_name }}
      poc_name: ${{ steps.extract_poc_name.outputs.poc_name }}
    steps:
      - name: Check issue title for destroy command
        id: check_title
        uses: actions/github-script@v6
        with:
          script: |
            const title = context.payload.issue.title.toLowerCase();
            const shouldDestroy = title.includes('[destroy]');
            core.setOutput('should_destroy', shouldDestroy);
            console.log(`Destroy command detected: ${shouldDestroy}`);

      - name: Extract POC_NAME from issue label
        id: extract_poc_name
        if: steps.check_title.outputs.should_destroy == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            const pocLabel = issue.labels.find(label => label.name.startsWith('poc:'));
            if (!pocLabel) {
              core.setFailed('이슈에서 POC 라벨을 찾을 수 없습니다.');
              return;
            }
            
            const pocName = pocLabel.name.replace('poc:', '').trim();
            core.setOutput('poc_name', pocName);
            console.log(`POC 이름: ${pocName}`);

      - name: Parse issue body for resource group name
        id: parse_issue
        if: steps.check_title.outputs.should_destroy == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const issueBody = context.payload.issue.body;
            
            // 이슈 본문에서 리소스 그룹 이름을 추출하는 정규식
            const rgRegex = /리소스\s*그룹\s*[이름:|:]\s*([^\n]+)/i;
            const rgMatch = issueBody.match(rgRegex);
            
            if (!rgMatch) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: '⚠️ 이슈 본문에서 리소스 그룹 이름을 찾을 수 없습니다. 이슈 본문에 "리소스 그룹 이름: [그룹이름]" 형식으로 추가해주세요.'
              });
              core.setFailed('리소스 그룹 이름을 찾을 수 없습니다.');
              return;
            }
            
            const resourceGroupName = rgMatch[1].trim();
            core.setOutput('resource_group_name', resourceGroupName);
            console.log(`리소스 그룹 이름: ${resourceGroupName}`);

  destroy:
    needs: check_issue
    if: needs.check_issue.outputs.should_destroy == 'true'
    runs-on: ubuntu-latest
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      RESOURCE_GROUP_NAME: ${{ needs.check_issue.outputs.resource_group_name }}
      POC_NAME: ${{ needs.check_issue.outputs.poc_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Azure using OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create backend.tf
        run: |
          echo "사용할 POC 이름: $POC_NAME"
          
          cat > backend.tf << EOF
          terraform {
            backend "azurerm" {
              resource_group_name  = "terraform-state-rg"
              storage_account_name = "tfstatebithumbdev"
              container_name       = "tfstate"
              key                  = "poc/${POC_NAME}/terraform.tfstate"
            }
          }
          EOF
          
          cat backend.tf

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan Destroy
        id: plan
        run: terraform plan -destroy -out=destroy.tfplan -var="resource_group_name=$RESOURCE_GROUP_NAME"

      - name: Terraform Destroy
        run: terraform apply -auto-approve destroy.tfplan

      - name: Comment on issue
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: '✅ Terraform Destroy가 성공적으로 완료되었습니다. 리소스 그룹 `${{ needs.check_issue.outputs.resource_group_name }}`의 리소스가 삭제되었습니다.'
            });