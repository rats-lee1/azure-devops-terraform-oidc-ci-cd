name: 'Azure Resource Group Destroy'

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: '처리할 이슈 번호'
        required: true
        type: number

permissions:
  id-token: write
  contents: read
  issues: write

jobs:
  # Destroy 작업 사전 확인
  Destroy-Check:
    runs-on: ubuntu-latest
    outputs:
      resource_group: ${{ steps.get-resource-group.outputs.resource_group }}
      project_name: ${{ steps.get-project-name.outputs.project_name }}
      confirmed: ${{ steps.confirm-destruction.outputs.confirmed }}
    
    steps:
      - name: Get Issue Number and Extract Information
        id: get-issue-info
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ github.event.inputs.issue_number }};
            const repo = context.repo;
            
            // 이슈 상세 정보 가져오기
            const issue = await github.rest.issues.get({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: issue_number
            });
            
            const issue_body = issue.data.body;
            console.log(`이슈 바디 : ${issue_body}`);
            
            // 프로젝트명 추출
            let projectName = null;
            const projectNameMatch = issue_body.match(/###\s*프로젝트명\s*\n([^\n]+)/);
            if (projectNameMatch && projectNameMatch[1]) {
              projectName = projectNameMatch[1].trim();
            }

            if (!projectName) {
              core.setFailed('이슈 본문에서 프로젝트명을 찾을 수 없습니다.');
              return;
            }
            
            console.log(`✅ 프로젝트명: ${projectName}`);
            core.setOutput('project_name', projectName);
          
      - name: Confirm Destruction Request
        id: confirm-destruction
        run: |
          RESOURCE_GROUP="${{ steps.get-resource-group.outputs.resource_group }}"
          
          if [ -z "$RESOURCE_GROUP" ]; then
            echo "리소스 그룹 이름이 없어 삭제를 진행할 수 없습니다."
            echo "confirmed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "⚠️ 리소스 그룹 '${RESOURCE_GROUP}'을 삭제할 준비가 되었습니다."
          echo "confirmed=true" >> $GITHUB_OUTPUT
      
      - name: Add Destruction Request Label
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ github.event.inputs.issue_number }};
            const repo = context.repo;
            
            await github.rest.issues.addLabels({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: issue_number,
              labels: ['pending-deletion']
            });
            
            console.log('Added pending-deletion label to the issue');
      
      - name: Comment Destruction Request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ github.event.inputs.issue_number }};
            const repo = context.repo;
            const resourceGroup = "${{ steps.get-resource-group.outputs.resource_group }}";
            
            await github.rest.issues.createComment({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: issue_number,
              body: `## 리소스 그룹 삭제 요청 접수 ⚠️
              
              리소스 그룹 \`${resourceGroup}\` 삭제 요청이 접수되었습니다.
              
              팀장님의 승인 후 삭제가 진행됩니다. 삭제를 취소하려면 이슈에 코멘트를 남겨주세요.`
            });
  
  # 실제 리소스 삭제 작업 (승인 필요)
  Destroy:
    needs: Destroy-Check
    if: needs.Destroy-Check.outputs.confirmed == 'true'
    environment: 
      name: production
      url: ${{ github.server_url }}/${{ github.repository }}/issues/${{ github.event.inputs.issue_number }}
    runs-on: ubuntu-latest
    
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      RESOURCE_GROUP: ${{ needs.Destroy-Check.outputs.resource_group }}
      PROJECT_NAME: ${{ needs.Destroy-Check.outputs.project_name }}
    
    steps:
      - name: Mark Deletion Started
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ github.event.inputs.issue_number }};
            const repo = context.repo;
            
            // 1) 기존 라벨 제거 
            try {
              await github.rest.issues.removeLabel({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: issue_number,
                name: 'pending-deletion'
              });
            } catch (e) {
              console.log('라벨 제거 중 오류. 이미 제거되었을 수 있음:', e.message);
            }
            
            // 2) 새 라벨 추가
            await github.rest.issues.addLabels({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: issue_number,
              labels: ['deletion-in-progress']
            });
            
            // 3) 코멘트 추가
            await github.rest.issues.createComment({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: issue_number,
              body: `## 리소스 그룹 삭제 시작 ⚡
              
              리소스 그룹 \`${{ needs.Destroy-Check.outputs.resource_group }}\`의 삭제가 시작되었습니다.
              삭제 작업이 진행 중입니다. 잠시만 기다려주세요.`
            });
      
      - name: 'Az CLI login with OIDC'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.6.0'
      
      - name: Check out code 
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      
      - name: Setup Terraform Backend
        id: setup-backend
        run: |
          # 프로젝트 구조 확인
          if [ -f "backend.tf" ]; then
            BACKEND_FILE="backend.tf"
          elif [ -f "terraform/backend.tf" ]; then
            BACKEND_FILE="terraform/backend.tf"
          else
            echo "⚠️ backend.tf 파일을 찾을 수 없습니다. 프로젝트 구조를 확인해주세요."
            exit 1
          fi
          
          # 프로젝트 이름 확인
          PROJECT_NAME="${{ env.PROJECT_NAME }}"
          echo "프로젝트 이름: $PROJECT_NAME"
          
          # 백엔드 파일의 내용 확인 및 필요시 수정
          echo "기존 백엔드 파일 내용:"
          cat "$BACKEND_FILE"
          
          # 프로젝트 이름 변수가 있는지 확인하고 실제 값으로 대체
          if grep -q "\${PROJECT_NAME}" "$BACKEND_FILE"; then
            echo "백엔드 파일에서 \${PROJECT_NAME} 변수를 실제 값으로 대체합니다..."
            sed -i "s|\${PROJECT_NAME}|$PROJECT_NAME|g" "$BACKEND_FILE"
            echo "수정된 백엔드 파일 내용:"
            cat "$BACKEND_FILE"
          fi

      - name: Initialize Terraform to access state
        id: terraform-init
        run: |
          # 프로젝트 구조에 따라 terraform 디렉토리 또는 루트에서 실행
          if [ -d "terraform" ] && [ -f "terraform/backend.tf" ]; then
            cd terraform
            echo "terraform 디렉토리에서 초기화 실행..."
            terraform init
          else
            echo "루트 디렉토리에서 초기화 실행..."
            terraform init
          fi
          echo "✅ Terraform 초기화 완료"
      
      - name: Extract Resource Group from tfstate
        id: extract-rg-from-tfstate
        run: |
          # 프로젝트 구조에 따라 경로 결정
          if [ -d "terraform" ] && [ -f "terraform/backend.tf" ]; then
            cd terraform
          fi
          
          # tfstate의 리소스 그룹 확인 시도
          echo "Terraform 상태 파일에서 리소스 그룹 정보 확인 중..."
          
          # 리소스 그룹 출력 시도
          TFSTATE_RG=""
          if terraform state list | grep -q "azurerm_resource_group"; then
            echo "✅ Terraform 상태 파일에서 리소스 그룹 찾음"
            
            # 상태 파일의 첫 번째 리소스 그룹 이름 추출
            FIRST_RG_RESOURCE=$(terraform state list | grep "azurerm_resource_group" | head -n 1)
            if [ -n "$FIRST_RG_RESOURCE" ]; then
              RG_NAME=$(terraform state show "$FIRST_RG_RESOURCE" | grep "name" | head -n 1 | cut -d '=' -f2 | tr -d ' "')
              echo "찾은 리소스 그룹: $RG_NAME"
              TFSTATE_RG="$RG_NAME"
            fi
          fi
          
          # 결과 출력
          if [ -n "$TFSTATE_RG" ]; then
            echo "tfstate_resource_group=$TFSTATE_RG" >> $GITHUB_OUTPUT
            echo "tfstate_found=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Terraform 상태 파일에서 리소스 그룹을 찾을 수 없습니다."
            echo "tfstate_found=false" >> $GITHUB_OUTPUT
          fi

      - name: Check Resource Group Existence
        id: check-rg
        run: |
          # tfstate에서 확인된 리소스 그룹 (있는 경우)
          TFSTATE_RG="${{ steps.extract-rg-from-tfstate.outputs.tfstate_resource_group }}"
          TFSTATE_FOUND="${{ steps.extract-rg-from-tfstate.outputs.tfstate_found }}"
          
          # 최종 삭제할 리소스 그룹 결정 - tfstate 우선 사용
          if [ "$TFSTATE_FOUND" = "true" ] && [ -n "$TFSTATE_RG" ]; then
            echo "✅ tfstate에서 확인된 리소스 그룹 '$TFSTATE_RG'을(를) 사용합니다."
            TARGET_RG="$TFSTATE_RG"
          else
            echo "⚠️ tfstate에서 리소스 그룹을 찾을 수 없어 이슈에서 지정된 '${{ env.RESOURCE_GROUP }}'을(를) 사용합니다."
            TARGET_RG="${{ env.RESOURCE_GROUP }}"
          fi
          
          echo "target_resource_group=$TARGET_RG" >> $GITHUB_OUTPUT
          
          # 리소스 그룹 존재 여부 확인
          if az group exists --name "$TARGET_RG" | grep -q "true"; then
            echo "리소스 그룹 '$TARGET_RG'이(가) 존재함을 확인했습니다."
            echo "exists=true" >> $GITHUB_OUTPUT
            
            # 리소스 그룹에 속한 리소스 목록 출력
            echo "리소스 그룹 내 리소스 목록:"
            az resource list --resource-group "$TARGET_RG" --query "[].{name:name, type:type}" -o table
          else
            echo "리소스 그룹 '$TARGET_RG'이(가) 존재하지 않습니다!"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Delete Resources using Terraform
        id: terraform-destroy
        if: steps.extract-rg-from-tfstate.outputs.tfstate_found == 'true'
        run: |
          echo "Terraform을 사용하여 리소스 삭제 시작..."
          
          # 프로젝트 구조에 따라 경로 결정
          if [ -d "terraform" ] && [ -f "terraform/backend.tf" ]; then
            cd terraform
          fi
          
          # terraform destroy 실행
          if terraform destroy -auto-approve; then
            echo "✅ Terraform destroy 성공적으로 완료"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Terraform destroy 실패"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: Check if Resource Group still exists after Terraform destroy
        id: check-rg-after-terraform
        if: steps.terraform-destroy.outcome == 'success'
        run: |
          TARGET_RG="${{ steps.check-rg.outputs.target_resource_group }}"
          
          if az group exists --name "$TARGET_RG" | grep -q "true"; then
            echo "⚠️ 리소스 그룹 '$TARGET_RG'이(가) Terraform destroy 후에도
            여전히 존재합니다. Azure CLI로 직접 삭제를 시도합니다."
            echo "still_exists=true" >> $GITHUB_OUTPUT
          else
            echo "✅ 리소스 그룹 '$TARGET_RG'이(가) Terraform에 의해 성공적으로 삭제되었습니다."
            echo "still_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Delete Resource Group with Azure CLI (fallback)
        id: delete-rg-cli
        if: |
          (steps.terraform-destroy.outcome == 'failure' || steps.check-rg-after-terraform.outputs.still_exists == 'true') && 
          steps.check-rg.outputs.exists == 'true'
        run: |
          TARGET_RG="${{ steps.check-rg.outputs.target_resource_group }}"
          echo "Azure CLI를 사용하여 리소스 그룹 '$TARGET_RG' 직접 삭제 중..."
          
          # 진행 상황을 표시하는 진행 안내 시작
          echo "이 작업은 몇 분 정도 걸릴 수 있습니다."
          
          # 리소스 그룹 삭제
          if az group delete --name "$TARGET_RG" --yes; then
            echo "✅ Azure CLI로 리소스 그룹 삭제 완료"
            echo "success=true" >> $GITHUB_OUTPUT
            
            # 이미 삭제된 리소스를 Terraform 상태에서 제거
            if [ "${{ steps.extract-rg-from-tfstate.outputs.tfstate_found }}" = "true" ]; then
              echo "Terraform 상태에서 삭제된 리소스 제거 중..."
              
              # 프로젝트 구조에 따라 경로 결정
              if [ -d "terraform" ] && [ -f "terraform/backend.tf" ]; then
                cd terraform
              fi
              
              # 리소스 그룹 관련 항목 찾기
              RESOURCES=$(terraform state list | grep -i "azurerm_resource_group\\|azurerm_resources\\|azurerm_resource")
              
              # 발견된 모든 리소스를 상태에서 제거
              if [ -n "$RESOURCES" ]; then
                echo "다음 항목을 상태에서 제거합니다:"
                echo "$RESOURCES"
                
                echo "$RESOURCES" | while read -r resource; do
                  echo "제거 중: $resource"
                  terraform state rm "$resource" || echo "⚠️ 상태 제거 실패: $resource"
                done
                
                echo "✅ Terraform 상태 정리 완료"
              else
                echo "⚠️ Terraform 상태에서 제거할 리소스 그룹 관련 항목을 찾을 수 없습니다."
              fi
            fi
          else
            echo "❌ Azure CLI로 리소스 그룹 삭제 실패"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # 실제로 삭제되었는지 한 번 더 확인
          if az group exists --name "$TARGET_RG" | grep -q "false"; then
            echo "✅ 리소스 그룹이 성공적으로 삭제되었음을 확인했습니다."
          else
            echo "⚠️ 리소스 그룹이 아직 존재합니다. 삭제 중이거나 문제가 발생했을 수 있습니다."
          fi
      
      - name: Handle Non-Existent Resource Group
        if: steps.terraform-destroy.outcome != 'success' && steps.check-rg.outputs.exists == 'false'
        run: |
          TARGET_RG="${{ steps.check-rg.outputs.target_resource_group }}"
          echo "⚠️ 요청한 리소스 그룹 '$TARGET_RG'이(가) 존재하지 않아 삭제할 수 없습니다."
          echo "## 리소스 그룹 존재하지 않음" >> $GITHUB_STEP_SUMMARY
          echo "- 리소스 그룹: **$TARGET_RG**" >> $GITHUB_STEP_SUMMARY
          echo "- 상태: ⚠️ 이미 삭제되었거나 존재하지 않음" >> $GITHUB_STEP_SUMMARY
          
          # tfstate에 리소스가 남아있다면 terraform state rm 실행
          if [ "${{ steps.extract-rg-from-tfstate.outputs.tfstate_found }}" = "true" ]; then
            echo "리소스 그룹은 존재하지 않지만 Terraform 상태에서 정리 시도..."
            
            # 프로젝트 구조에 따라 경로 결정
            if [ -d "terraform" ] && [ -f "terraform/backend.tf" ]; then
              cd terraform
            fi
            
            # 리소스 그룹 관련 항목 찾기
            RESOURCES=$(terraform state list | grep -i "azurerm_resource_group\\|azurerm_resources\\|azurerm_resource")
            
            # 발견된 모든 리소스를 상태에서 제거
            if [ -n "$RESOURCES" ]; then
              echo "다음 항목을 상태에서 제거합니다:"
              echo "$RESOURCES"
              
              echo "$RESOURCES" | while read -r resource; do
                echo "제거 중: $resource"
                terraform state rm "$resource" || echo "⚠️ 상태 제거 실패: $resource"
              done
              
              echo "✅ Terraform 상태 정리 완료"
            else
              echo "⚠️ Terraform 상태에서 제거할 리소스 그룹 관련 항목을 찾을 수 없습니다."
            fi
          fi
      
      - name: Notify Completion
        uses: actions/github-script@v6
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ github.event.inputs.issue_number }};
            const repo = context.repo;
            const resourceGroup = "${{ steps.check-rg.outputs.target_resource_group }}";
            const exists = "${{ steps.check-rg.outputs.exists }}" === "true";
            const tfstateFound = "${{ steps.extract-rg-from-tfstate.outputs.tfstate_found }}" === "true";
            
            // 삭제 성공 여부 확인
            const terraformSuccess = "${{ steps.terraform-destroy.outputs.success }}" === "true";
            const azureCliSuccess = "${{ steps.delete-rg-cli.outputs.success }}" === "true";
            const success = terraformSuccess || azureCliSuccess;
            
            // 1) 기존 라벨 제거
            try {
              await github.rest.issues.removeLabel({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: issue_number,
                name: 'deletion-in-progress'
              });
            } catch (e) {
              console.log('라벨 제거 중 오류. 이미 제거되었을 수 있음:', e.message);
            }
            
            // 2) 상태에 따라 라벨 추가 및 코멘트 추가
            if (!exists) {
              // 리소스 그룹이 존재하지 않는 경우
              await github.rest.issues.addLabels({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: issue_number,
                labels: ['no-resource-found']
              });
              
              let commentBody = `## 리소스 그룹 존재하지 않음 ⚠️
              
              요청하신 리소스 그룹 \`${resourceGroup}\`을(를) 찾을 수 없습니다.
              이미 삭제되었거나 존재하지 않는 리소스 그룹입니다.`;
              
              if (tfstateFound) {
                commentBody += `\n\n그러나 Terraform 상태 파일에서는 리소스가 발견되어 상태 파일에서 해당 리소스를 제거했습니다.`;
              }
              
              await github.rest.issues.createComment({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: issue_number,
                body: commentBody
              });
            } else if (success) {
              // 리소스 그룹 삭제 성공
              await github.rest.issues.addLabels({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: issue_number,
                labels: ['Completed']
              });
              
              let commentBody = `## 리소스 그룹 삭제 완료 ✅
              
              리소스 그룹 \`${resourceGroup}\`이(가) 성공적으로 삭제되었습니다.`;
              
              if (terraformSuccess) {
                commentBody += `\n\nTerraform을 통해 리소스가 삭제되었으며, 상태 파일도 업데이트되었습니다.`;
              } else if (azureCliSuccess && tfstateFound) {
                commentBody += `\n\nAzure CLI를 통해 리소스가 삭제되었으며, Terraform 상태 파일에서도 해당 리소스를 제거했습니다.`;
              }
              
              await github.rest.issues.createComment({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: issue_number,
                body: commentBody
              });
            } else {
              // 리소스 그룹 삭제 실패
              await github.rest.issues.addLabels({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: issue_number,
                labels: ['deletion-failed']
              });
              
              await github.rest.issues.createComment({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: issue_number,
                body: `## 리소스 그룹 삭제 실패 ❌
                
                리소스 그룹 \`${resourceGroup}\` 삭제 중 오류가 발생했습니다.
                워크플로우 로그를 확인하여 자세한 오류 내용을 확인해주세요.`
              });
            }
      
      - name: Final Summary
        run: |
          TARGET_RG="${{ steps.check-rg.outputs.target_resource_group }}"
          TFSTATE_FOUND="${{ steps.extract-rg-from-tfstate.outputs.tfstate_found }}"
          TERRAFORM_SUCCESS="${{ steps.terraform-destroy.outputs.success }}"
          AZURE_CLI_SUCCESS="${{ steps.delete-rg-cli.outputs.success }}"
          
          echo "## 리소스 그룹 삭제 요약" >> $GITHUB_STEP_SUMMARY
          echo "- 프로젝트 이름: **${{ env.PROJECT_NAME }}**" >> $GITHUB_STEP_SUMMARY
          echo "- 이슈에 지정된 리소스 그룹: **${{ env.RESOURCE_GROUP }}**" >> $GITHUB_STEP_SUMMARY
          
          if [ "$TFSTATE_FOUND" = "true" ]; then
            echo "- Terraform 상태 파일의 리소스 그룹: **${{ steps.extract-rg-from-tfstate.outputs.tfstate_resource_group }}**" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Terraform 상태 파일에서 리소스 그룹을 찾을 수 없음" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- 실제 삭제 대상 리소스 그룹: **$TARGET_RG**" >> $GITHUB_STEP_SUMMARY
          
          # 삭제 방법과 상태 요약
          if [ "${{ steps.check-rg.outputs.exists }}" = "true" ]; then
            if [ "$TERRAFORM_SUCCESS" = "true" ]; then
              echo "- 상태: ✅ Terraform으로 성공적으로 삭제됨" >> $GITHUB_STEP_SUMMARY
            elif [ "$AZURE_CLI_SUCCESS" = "true" ]; then
              echo "- 상태: ✅ Azure CLI로 성공적으로 삭제됨" >> $GITHUB_STEP_SUMMARY
              
              if [ "$TFSTATE_FOUND" = "true" ]; then
                echo "- Terraform 상태: ✅ 상태 파일에서 수동으로 리소스 제거됨" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "- 상태: ❌ 삭제 실패" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- 상태: ⚠️ 리소스 그룹이 존재하지 않음" >> $GITHUB_STEP_SUMMARY
            
            if [ "$TFSTATE_FOUND" = "true" ]; then
              echo "- Terraform 상태: ✅ 상태 파일에서 수동으로 리소스 제거됨" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "- 완료 시간: $(date)" >> $GITHUB_STEP_SUMMARY