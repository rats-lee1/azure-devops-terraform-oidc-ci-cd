name: 'Azure Resource Group Destroy'

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: '처리할 이슈 번호'
        required: true
        type: number

permissions:
  id-token: write
  contents: read
  issues: write

jobs:
  # Destroy 작업 사전 확인
  Destroy-Check:
    runs-on: ubuntu-latest
    outputs:
      project_name: ${{ steps.get-issue-info.outputs.project_name }}
      resource_group_name: ${{ steps.get-issue-info.outputs.resource_group_name }}
    
    steps:
      - name: Get Issue Number and Extract Information
        id: get-issue-info
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ github.event.inputs.issue_number }};
            const repo = context.repo;
            
            // 이슈 상세 정보 가져오기
            const issue = await github.rest.issues.get({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: issue_number
            });
            
            const issue_body = issue.data.body;
            console.log(`이슈 바디 : ${issue_body}`);
            
            // 프로젝트명 추출
            let projectName = null;
            const projectNameMatch = issue_body.match(/###\s*프로젝트명\s*\n([^\n]+)/);
            if (projectNameMatch && projectNameMatch[1]) {
              projectName = projectNameMatch[1].trim();
            }

            if (!projectName) {
              core.setFailed('이슈 본문에서 프로젝트명을 찾을 수 없습니다.');
              return;
            }
            
            // 리소스 그룹명 추출
            let resourceGroupName = null;
            const resourceGroupMatch = issue_body.match(/###\s*리소스_그룹명\s*\n([^\n]+)/);
            if (resourceGroupMatch && resourceGroupMatch[1]) {
              resourceGroupName = resourceGroupMatch[1].trim();
            }
            
            console.log(`✅ 프로젝트명: ${projectName}`);
            if (resourceGroupName) {
              console.log(`✅ 리소스 그룹명: ${resourceGroupName}`);
              core.setOutput('resource_group_name', resourceGroupName);
            } else {
              console.log(`⚠️ 리소스 그룹명 정보 없음, 프로젝트명으로 대체합니다.`);
              core.setOutput('resource_group_name', projectName);
            }
            
            core.setOutput('project_name', projectName);

      - name: Comment Destruction Request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ github.event.inputs.issue_number }};
            const repo = context.repo;
            const projectName = "${{ steps.get-issue-info.outputs.project_name }}"; // 프로젝트명 가져오기
            
            await github.rest.issues.createComment({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: issue_number,
              body: `## 프로젝트 삭제 요청 접수 ⚠️
              
              프로젝트 \`${projectName}\` 삭제 요청이 접수되었습니다.
              
              팀장님의 승인 후 삭제가 진행됩니다. 삭제를 취소하려면 이슈에 코멘트를 남겨주세요.`
            });

      - name: Add Destruction Request Label
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ github.event.inputs.issue_number }};
            const repo = context.repo;
            
            await github.rest.issues.addLabels({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: issue_number,
              labels: ['pending-deletion']
            });
            
            console.log('Added pending-deletion label to the issue');
      

  
  # 실제 리소스 삭제 작업 (승인 필요)
  Destroy:
    needs: Destroy-Check
    # if: needs.Destroy-Check.outputs.confirmed == 'true'
    environment: 
      name: production
      url: ${{ github.server_url }}/${{ github.repository }}/issues/${{ github.event.inputs.issue_number }}
    runs-on: ubuntu-latest
    
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      PROJECT_NAME: ${{ needs.Destroy-Check.outputs.project_name }}
      RESOURCE_GROUP_NAME: ${{ needs.Destroy-Check.outputs.resource_group_name }}
    
    steps:

      - name: Mark Deletion Started
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ github.event.inputs.issue_number }};
            const repo = context.repo;
            
            // 1) 기존 라벨 제거 
            try {
              await github.rest.issues.removeLabel({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: issue_number,
                name: 'pending-deletion'
              });
            } catch (e) {
              console.log('라벨 제거 중 오류. 이미 제거되었을 수 있음:', e.message);
            }
            
            // 2) 새 라벨 추가
            await github.rest.issues.addLabels({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: issue_number,
              labels: ['deletion-in-progress']
            });
            
            // 3) 코멘트 추가
            await github.rest.issues.createComment({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: issue_number,
              body: `## 리소스 삭제 시작 ⚡
              
              프로젝트 \`${{ needs.Destroy-Check.outputs.project_name }}\`의 리소스 삭제가 시작되었습니다.
              삭제 작업이 진행 중입니다. 잠시만 기다려주세요.`
            });
      
      - name: 'Az CLI login with OIDC'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.6.0'
      
      - name: Check out code 
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      
      - name: Setup Terraform Backend
        id: setup-backend
        run: |
          # 프로젝트 이름 확인
          PROJECT_NAME="${{ env.PROJECT_NAME }}"
          echo "프로젝트 이름: $PROJECT_NAME"
          
          # 백엔드 파일 생성
          echo "백엔드 파일을 생성합니다..."
          cat > backend.tf << EOF
          terraform {
            backend "azurerm" {
              resource_group_name  = "terraform-state-rg"
              storage_account_name = "tfstatebithumbdev"
              container_name       = "tfstate"
              key                  = "projects/${PROJECT_NAME}/terraform.tfstate"
            }
          }
          EOF
          
          echo "생성된 백엔드 파일 내용:"
          cat backend.tf

      - name: Initialize Terraform
        id: terraform-init
        run: |
          # 프로젝트 구조에 따라 terraform 디렉토리 또는 루트에서 실행
          if [ -d "terraform" ]; then
            cd terraform
            cp ../backend.tf .
            echo "terraform 디렉토리에서 초기화 실행..."
            terraform init
            TERRAFORM_DIR="terraform"
          else
            echo "루트 디렉토리에서 초기화 실행..."
            terraform init
            TERRAFORM_DIR="."
          fi
          echo "✅ Terraform 초기화 완료"
          echo "terraform_dir=$TERRAFORM_DIR" >> $GITHUB_OUTPUT

      - name: Destroy Resources with Terraform
        id: terraform-destroy
        run: |
          TERRAFORM_DIR="${{ steps.terraform-init.outputs.terraform_dir }}"
          
          if [ "$TERRAFORM_DIR" = "terraform" ]; then
            cd terraform
          fi
          
          echo "Terraform destroy 명령 실행 중..."
          echo "모든 리소스를 한번에 삭제합니다..."
          
          # 변수 파일 생성
          cat > terraform.tfvars << EOF
          resource_group_name = "${{ env.RESOURCE_GROUP_NAME }}"
          EOF
          
          echo "생성된 변수 파일 내용:"
          cat terraform.tfvars
          
          # 또는 명령줄 변수로 전달
          if terraform destroy -auto-approve -var="resource_group_name=${{ env.RESOURCE_GROUP_NAME }}"; then
            echo "✅ Terraform destroy 성공적으로 완료되었습니다."
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Terraform destroy 실패"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Notify Completion
        uses: actions/github-script@v6
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ github.event.inputs.issue_number }};
            const repo = context.repo;
            const projectName = "${{ needs.Destroy-Check.outputs.project_name }}";
            const success = "${{ steps.terraform-destroy.outputs.success }}" === "true";
            
            // 1) 기존 라벨 제거
            try {
              await github.rest.issues.removeLabel({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: issue_number,
                name: 'deletion-in-progress'
              });
            } catch (e) {
              console.log('라벨 제거 중 오류. 이미 제거되었을 수 있음:', e.message);
            }
            
            // 2) 상태에 따라 라벨 추가 및 코멘트 추가
            if (success) {
              // 리소스 삭제 성공
              await github.rest.issues.addLabels({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: issue_number,
                labels: ['Completed']
              });
              
              await github.rest.issues.createComment({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: issue_number,
                body: `## 리소스 삭제 완료 ✅
                
                프로젝트 \`${projectName}\`의 모든 리소스가 성공적으로 삭제되었습니다.
                Terraform을 통해 리소스가 삭제되었으며, 상태 파일도 업데이트되었습니다.`
              });
            } else {
              // 리소스 삭제 실패
              await github.rest.issues.addLabels({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: issue_number,
                labels: ['deletion-failed']
              });
              
              await github.rest.issues.createComment({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: issue_number,
                body: `## 리소스 삭제 실패 ❌
                
                프로젝트 \`${projectName}\`의 리소스 삭제 중 오류가 발생했습니다.
                워크플로우 로그를 확인하여 자세한 오류 내용을 확인해주세요.`
              });
            }
      
      - name: Final Summary
        run: |
          echo "## 리소스 삭제 요약" >> $GITHUB_STEP_SUMMARY
          echo "- 프로젝트 이름: **${{ env.PROJECT_NAME }}**" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.terraform-destroy.outputs.success }}" = "true" ]; then
            echo "- 상태: ✅ Terraform으로 성공적으로 삭제됨" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 상태: ❌ 삭제 실패" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- 완료 시간: $(date)" >> $GITHUB_STEP_SUMMARY