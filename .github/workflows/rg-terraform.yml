name: 'Resource Group Issue Workflow'

on:
  issues:
    types: [opened, labeled]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  issues: read

jobs:
  check-label-and-extract-resource-group:
    runs-on: ubuntu-latest
    # 라벨 이벤트인 경우 'resource group' 라벨이 있을 때만 실행
    if: github.event.label.name == 'resource group' || contains(github.event.issue.labels.*.name, 'resource group')
    outputs:
      resource_group: ${{ steps.get-resource-group.outputs.resource_group }}
    steps:
      - name: Check for Resource Group Label
        id: check-label
        run: |
          # 이슈에 'resource group' 라벨이 있는지 확인
          IS_LABELED=false
          
          # 이벤트 유형 확인
          if [ "${{ github.event_name }}" = "issues" ] && [ "${{ github.event.action }}" = "labeled" ]; then
            # 라벨 이벤트인 경우
            LABEL="${{ github.event.label.name }}"
            if [ "$LABEL" = "resource group" ]; then
              IS_LABELED=true
            fi
          else
            # 이슈 오픈 이벤트인 경우 라벨 목록 확인
            LABELS="${{ toJSON(github.event.issue.labels) }}"
            if [[ $LABELS == *"resource group"* ]]; then
              IS_LABELED=true
            fi
          fi
          
          if [ "$IS_LABELED" = "false" ]; then
            echo "❌ This workflow only runs with the 'resource group' label."
            exit 1
          fi
          
          echo "✅ Resource Group label detected."
      
      - name: Extract Resource Group from Issue (Issue Forms)
        id: get-resource-group
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.issue.number;
            const repo = context.repo;
            
            // 이슈 상세 정보 가져오기
            const issue = await github.rest.issues.get({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: issue_number
            });
            
            let resourceGroup = null;
            const issueBody = issue.data.body;
            
            // Issue Forms 형식인 경우
            if (issueBody.includes('### 리소스 그룹명') || issueBody.includes('### Resource group name')) {
              // Issue Forms의 구조화된 데이터에서 리소스 그룹명 추출
              const lines = issueBody.split('\n');
              for (let i = 0; i < lines.length; i++) {
                if (lines[i].includes('### 리소스 그룹명') || lines[i].includes('### Resource group name')) {
                  // 다음 줄이 리소스 그룹명
                  if (i + 1 < lines.length) {
                    resourceGroup = lines[i + 1].trim();
                    break;
                  }
                }
              }
            } else {
              // 기존 텍스트 형식인 경우 정규식으로 추출
              const resourceGroupPatterns = [
                /리소스_그룹명:\s*([a-zA-Z0-9_-]+)/i,
                /리소스\s+그룹:\s*([a-zA-Z0-9_-]+)/i,
                /resource\s+group:\s*([a-zA-Z0-9_-]+)/i
              ];
              
              for (const pattern of resourceGroupPatterns) {
                const match = issueBody.match(pattern);
                if (match && match[1]) {
                  resourceGroup = match[1];
                  break;
                }
              }
            }
            
            if (!resourceGroup) {
              core.setFailed('Resource Group name not found in the issue body');
              return;
            }
            
            console.log(`Resource Group name: ${resourceGroup}`);
            core.setOutput('resource_group', resourceGroup);

  terraform-plan:
    needs: check-label-and-extract-resource-group
    runs-on: ubuntu-latest
    
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_resource_group_name: ${{ needs.check-label-and-extract-resource-group.outputs.resource_group }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: 'Check if secrets are set'
        run: |
          if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ]; then
            echo "❌ AZURE_CLIENT_ID is missing"
            exit 1
          fi
          if [ -z "${{ secrets.AZURE_TENANT_ID }}" ]; then
            echo "❌ AZURE_TENANT_ID is missing"
            exit 1
          fi
          if [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then
            echo "❌ AZURE_SUBSCRIPTION_ID is missing"
            exit 1
          fi
          echo "✅ All secrets are set"
      
      - name: 'Az CLI login with OIDC'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -var="resource_group_name=${TF_VAR_resource_group_name}" -out=tfplan
      
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: tfplan
          retention-days: 1
      
      - name: Post Plan Result to Issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.issue.number;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: `## Terraform Plan 완료 ✅
              
              리소스 그룹: \`${{ needs.check-label-and-extract-resource-group.outputs.resource_group }}\`
              
              Plan이 완료되었습니다. 팀장님의 승인 후 Apply가 진행됩니다.`
            });

  terraform-apply:
    needs: [check-label-and-extract-resource-group, terraform-plan]
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: ${{ github.server_url }}/${{ github.repository }}/issues/${{ github.event.issue.number }}
    
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_resource_group_name: ${{ needs.check-label-and-extract-resource-group.outputs.resource_group }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: 'Az CLI login with OIDC'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      
      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
      
      - name: Post Apply Result to Issue
        if: ${{ success() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.issue.number;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: `## Terraform Apply 완료 ✅
              
              리소스 그룹: \`${{ needs.check-label-and-extract-resource-group.outputs.resource_group }}\`에 
              인프라 배포가 완료되었습니다.`
            });