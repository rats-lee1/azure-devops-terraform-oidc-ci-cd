name: 'Resource Group Issue Workflow'

on:
  issues:
    types: [opened, edited]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  issues: write

jobs:
pre-checking:
    runs-on: ubuntu-latest

    outputs:
      resource_group: ${{ steps.get-resource-group.outputs.resource_group }}
      poc_name: ${{ steps.extract-poc-info.outputs.poc_name }}
      has_poc: ${{ steps.extract-poc-info.outputs.has_poc }}
    steps:
      
      - name: Extract Resource Group from Issue (Issue Forms)
        id: get-resource-group
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.issue.number;
            const repo = context.repo;
            
            // 이슈 상세 정보 가져오기
            const issue = await github.rest.issues.get({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: issue_number
            });
            
            let resourceGroup = null;
            const issueBody = issue.data.body;
            
            // 간소화된 리소스 그룹명 추출 로직
            if (issueBody) {
              // 주요 패턴만 검색
              const mainPatterns = [
                /###\s+리소스_그룹명\s*([\s\S]*?)(?=###|$)/,
                /리소스[_\s]그룹명:?\s*([a-zA-Z0-9_-]+)/i,
                /resource\s+group:?\s*([a-zA-Z0-9_-]+)/i
              ];
              
              // 주요 패턴으로 검색
              for (const pattern of mainPatterns) {
                const match = issueBody.match(pattern);
                if (match && match[1]) {
                  resourceGroup = match[1].trim();
                  console.log(`✅ Found resource group name with pattern: ${resourceGroup}`);
                  break;
                }
              }
              
              // 패턴 검색으로 찾지 못한 경우, 리소스 그룹 형식의 줄 찾기
              if (!resourceGroup) {
                const lines = issueBody.split('\n');
                for (const line of lines) {
                  const trimmedLine = line.trim();
                  // 리소스 그룹 명명 규칙에 맞는 줄 찾기 (공백 없고 적절한 문자로 구성)
                  if (/^[a-zA-Z0-9][a-zA-Z0-9_-]{2,62}$/.test(trimmedLine)) {
                    resourceGroup = trimmedLine;
                    console.log(`✅ Found potential resource group name: ${resourceGroup}`);
                    break;
                  }
                }
              }
            }
            
            // 리소스 그룹명 검증
            if (resourceGroup) {
              // Azure 리소스 그룹 명명 규칙 검증
              const validNamePattern = /^[a-zA-Z0-9\-_\.\(\)]+$/;
              if (!validNamePattern.test(resourceGroup)) {
                console.log(`❌ 유효하지 않은 리소스 그룹명: "${resourceGroup}"`);
                console.log('리소스 그룹명은 영문자, 숫자, 대시(-), 밑줄(_), 괄호(), 마침표(.)만 포함할 수 있습니다.');
                
                // 오류를 이슈에 코멘트로 추가
                try {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.payload.issue.number,
                    body: `### ❌ 유효하지 않은 리소스 그룹명\n\n리소스 그룹명 \`${resourceGroup}\`은(는) Azure 명명 규칙에 맞지 않습니다.\n\n리소스 그룹명은 영문자, 숫자, 대시(-), 밑줄(_), 괄호(), 마침표(.)만 포함할 수 있습니다.\n\n유효한 리소스 그룹명으로 다시 시도해주세요.`
                  });
                  console.log('리소스 그룹명 오류 메시지가 이슈에 코멘트로 추가되었습니다.');
                } catch (commentError) {
                  console.error('코멘트 추가 중 오류 발생:', commentError.message);
                }
                
                core.setFailed(`유효하지 않은 리소스 그룹명: ${resourceGroup}`);
                return;
              }
            }
            
            if (!resourceGroup) {
              core.setFailed('Resource Group name not found in the issue body');
              return;
            }
            
            console.log(`✅ Resource Group name: ${resourceGroup}`);
            core.setOutput('resource_group', resourceGroup);

      - name: Extract POC from Labels
        id: extract-poc-info
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log(`이슈 #${context.payload.issue.number} POC 정보 추출 중`);
            
            try {
              // 이슈 정보 가져오기
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number
              });
              
              // 이슈 라벨 확인
              const labels = issue.data.labels || [];
              console.log(`이슈에 총 ${labels.length}개의 라벨이 있습니다.`);
              
              // POC 라벨 찾기 (POC: 로 시작하는 라벨)
              const pocLabels = labels.filter(label => {
                const labelName = label.name || '';
                return labelName.startsWith('POC:');
              });
              
              console.log(`${pocLabels.length}개의 POC 라벨이 발견되었습니다.`);
              
              let hasPOC = false;
              let pocName = '';
              
              if (pocLabels.length > 0) {
                // POC 라벨 정보 추출
                const pocInfo = pocLabels.map(label => {
                  const labelName = label.name;
                  const pocName = labelName.substring(4).trim(); // "POC:" 부분 제거
                  return {
                    fullLabel: labelName,
                    pocName: pocName,
                    color: label.color
                  };
                });
                
                console.log('발견된 POC 정보:', JSON.stringify(pocInfo, null, 2));
                
                hasPOC = true;
                pocName = pocInfo[0].pocName; // 첫 번째 POC 이름 사용
              } else {
                console.log('이 이슈에는 POC 라벨이 없습니다.');
                hasPOC = false;
                
                // POC가 없다는 경고 메시지를 이슈에 댓글로 추가
                try {
                  // 기존 코멘트가 있는지 확인
                  const comments = await github.rest.issues.listComments({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.payload.issue.number
                  });
                  
                  // 같은 경고 메시지를 이미 달았는지 확인
                  const warningComment = comments.data.find(comment => 
                    comment.body.includes('⚠️ 프로젝트 정보 누락') && 
                    comment.user.type === 'Bot'
                  );
                  
                  const warningMessage = `### ⚠️ 프로젝트 정보 누락\n\n이 이슈에 POC 정보가 없습니다. 적절한 POC 라벨(\`POC:이름\`)을 추가해주세요.`;
                  
                  if (warningComment) {
                    // 이미 경고 댓글이 있으면 업데이트하지 않음
                    console.log('이미 POC 누락 경고 메시지가 있습니다.');
                  } else {
                    // 새 경고 코멘트 작성
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: context.payload.issue.number,
                      body: warningMessage
                    });
                    console.log('POC 정보 누락 경고 메시지가 추가되었습니다.');
                  }
                } catch (commentError) {
                  console.error('경고 코멘트 추가 중 오류 발생:', commentError.message);
                }
              }
              
              // 출력 설정
              core.setOutput('has_poc', hasPOC.toString());
              core.setOutput('poc_name', pocName);
              
            } catch (error) {
              console.error('POC 정보 추출 중 오류 발생:', error.message);
              core.setOutput('has_poc', 'false');
              core.setOutput('poc_name', '');
              
              // 오류 정보를 이슈에 코멘트로 추가
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.issue.number,
                  body: `### ❌ POC 라벨 추출 중 오류 발생\n\n\`\`\`\n${error.message}\n\`\`\``
                });
                console.log('오류 정보가 이슈에 코멘트로 추가되었습니다.');
              } catch (commentError) {
                console.error('코멘트 추가 중 추가 오류 발생:', commentError.message);
              }
            }
      
      - name: Add Resource Group Summary
        run: |
          echo "## 리소스 그룹 및 POC 검증 결과" >> $GITHUB_STEP_SUMMARY
          echo "- 이슈 번호: #${{ github.event.issue.number }}" >> $GITHUB_STEP_SUMMARY
          echo "- 식별된 리소스 그룹: **${{ steps.get-resource-group.outputs.resource_group }}**" >> $GITHUB_STEP_SUMMARY
          echo "- POC 정보: **${{ steps.extract-poc-info.outputs.has_poc == 'true' && steps.extract-poc-info.outputs.poc_name || '없음' }}**" >> $GITHUB_STEP_SUMMARY
          echo "- 상태: ✅ 검증 완료" >> $GITHUB_STEP_SUMMARY

  terraform-plan:
    needs: pre-checking
    runs-on: ubuntu-latest
    # POC 정보가 있는 경우에만 진행
    if: needs.pre-checking.outputs.has_poc == 'true'
    
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_resource_group_name: ${{ needs.pre-checking.outputs.resource_group }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: 'Check if secrets are set'
        id: check-secrets
        run: |
          SECRETS_STATUS="✅ 모든 Azure 시크릿이 설정되었습니다."
          
          if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ]; then
            echo "❌ AZURE_CLIENT_ID is missing"
            SECRETS_STATUS="❌ AZURE_CLIENT_ID가 누락되었습니다."
            exit 1
          fi
          if [ -z "${{ secrets.AZURE_TENANT_ID }}" ]; then
            echo "❌ AZURE_TENANT_ID is missing"
            SECRETS_STATUS="❌ AZURE_TENANT_ID가 누락되었습니다."
            exit 1
          fi
          if [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then
            echo "❌ AZURE_SUBSCRIPTION_ID is missing"
            SECRETS_STATUS="❌ AZURE_SUBSCRIPTION_ID가 누락되었습니다."
            exit 1
          fi
          echo "✅ All secrets are set"
          echo "secrets_status=$SECRETS_STATUS" >> $GITHUB_OUTPUT
      
      - name: 'Az CLI login with OIDC'
        id: azure-login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      
      - name: Terraform Init
        id: tf-init
        run: |
          terraform init
          echo "## Terraform 초기화" >> $GITHUB_STEP_SUMMARY
          echo "- 상태: ✅ 초기화 완료" >> $GITHUB_STEP_SUMMARY
      
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -var="resource_group_name=${TF_VAR_resource_group_name}" -out=tfplan
          
          # Plan 상태 캡처 (개선된 방식)
          PLAN_OUTPUT=$(terraform show -no-color tfplan)
          
          # 리소스 변경 계산 방식 개선
          RESOURCES_TO_ADD=$(echo "$PLAN_OUTPUT" | grep -E '^\s*\+\s' | wc -l)
          RESOURCES_TO_CHANGE=$(echo "$PLAN_OUTPUT" | grep -E '^\s*~\s' | wc -l)
          RESOURCES_TO_DESTROY=$(echo "$PLAN_OUTPUT" | grep -E '^\s*-\s' | wc -l)
          
          # 요약 추가
          echo "## Terraform Plan 결과" >> $GITHUB_STEP_SUMMARY
          echo "- 리소스 그룹: **${TF_VAR_resource_group_name}**" >> $GITHUB_STEP_SUMMARY
          echo "- POC: **${{ needs.pre-checking.outputs.poc_name }}**" >> $GITHUB_STEP_SUMMARY
          echo "- 상태: ✅ Plan 완료" >> $GITHUB_STEP_SUMMARY
      
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: tfplan
          retention-days: 1
      
      - name: Post Plan Result to Issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.issue.number;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: `## Terraform Plan 완료 ✅
              
              리소스 그룹: \`${{ needs.pre-checking.outputs.resource_group }}\`
              POC: \`${{ needs.pre-checking.outputs.poc_name }}\`
              
              Plan이 완료되었습니다. 팀장님의 승인 후 Apply가 진행됩니다.`
            });

  handle-missing-poc:
    needs: pre-checking
    if: needs.pre-checking.outputs.has_poc == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Update Summary for Missing POC
        run: |
          echo "## 작업 중단 - POC 정보 누락" >> $GITHUB_STEP_SUMMARY
          echo "- 리소스 그룹: **${{ needs.pre-checking.outputs.resource_group }}**" >> $GITHUB_STEP_SUMMARY
          echo "- 상태: ❌ POC 정보가 누락되어 배포가 중단되었습니다" >> $GITHUB_STEP_SUMMARY
          echo "- 조치: POC 라벨을 추가한 후 다시 시도해주세요." >> $GITHUB_STEP_SUMMARY

      - name: Remove Resource Group Label
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                name: 'resource_group'
              });
              console.log('resource_group 라벨이 제거되었습니다.');
            } catch (e) {
              console.log('라벨 제거 중 오류 발생:', e.message);
            }

  terraform-apply:
    needs: [pre-checking, terraform-plan]
    runs-on: ubuntu-latest
    # POC 정보가 있는 경우에만 진행
    if: needs.pre-checking.outputs.has_poc == 'true'
    environment: 
      name: production
      url: ${{ github.server_url }}/${{ github.repository }}/issues/${{ github.event.issue.number }}
    outputs:
      approval_status: ${{ steps.get_approval_status.outputs.status }}
      started: ${{ steps.mark-start.outputs.started }}
      
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_resource_group_name: ${{ needs.pre-checking.outputs.resource_group }}
    
    steps:
      - name: Get Approval Status
        id: get_approval_status
        run: |
          # 환경 보호 검토 상태 확인
          # GitHub Actions에서는 이 값을 직접 얻을 수 없으므로, 그냥 성공했다고 가정
          # 실제로는 워크플로우가 여기까지 진행되면 승인된 것임
          echo "status=approved" >> $GITHUB_OUTPUT
          
          # 요약 추가
          echo "## 승인 정보" >> $GITHUB_STEP_SUMMARY
          echo "- 환경: **production**" >> $GITHUB_STEP_SUMMARY
          echo "- 상태: ✅ 승인됨" >> $GITHUB_STEP_SUMMARY

      - name: Mark job started
        id: mark-start
        run: echo "started=true" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
      
      - name: 'Az CLI login with OIDC'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Apply
        id: apply
        run: |
          terraform apply -auto-approve tfplan
          
          # 요약 시작
          echo "## Terraform Apply 결과" >> $GITHUB_STEP_SUMMARY
          echo "- 리소스 그룹: **${TF_VAR_resource_group_name}**" >> $GITHUB_STEP_SUMMARY
          echo "- POC: **${{ needs.pre-checking.outputs.poc_name }}**" >> $GITHUB_STEP_SUMMARY
          echo "- 상태: ✅ 성공적으로 배포됨" >> $GITHUB_STEP_SUMMARY
          
          # 리소스 목록 출력 (선택적)
          echo "### 배포된 리소스" >> $GITHUB_STEP_SUMMARY
          terraform state list | while read -r resource; do
            echo "- \`$resource\`" >> $GITHUB_STEP_SUMMARY
          done
      
      - name: Post Apply Result to Issue
        if: ${{ success() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.issue.number;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: `## Terraform Apply 완료 ✅
              
              리소스 그룹: \`${{ needs.pre-checking.outputs.resource_group }}\`
              POC: \`${{ needs.pre-checking.outputs.poc_name }}\`
              
              인프라 배포가 완료되었습니다.`
            });

  handle-rejection:
    needs: [terraform-plan, terraform-apply]
    # 수정된 조건: terraform-apply가 완료되기 전에 실패하거나 취소된 경우에만 실행
    if: >
      always() && 
      needs.terraform-plan.result == 'success' &&
      (needs.terraform-apply.result == 'failure' || 
       needs.terraform-apply.result == 'cancelled' || 
       needs.terraform-apply.result == 'skipped') && 
      needs.terraform-apply.outputs.started != 'true' &&
      needs.pre-checking.outputs.has_poc == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Update Summary for Rejection
        run: |
          echo "## 배포 거절 정보" >> $GITHUB_STEP_SUMMARY
          echo "- 리소스 그룹: **${{ needs.pre-checking.outputs.resource_group }}**" >> $GITHUB_STEP_SUMMARY
          echo "- POC: **${{ needs.pre-checking.outputs.poc_name }}**" >> $GITHUB_STEP_SUMMARY
          echo "- 상태: ❌ 배포 요청이 거절되었습니다" >> $GITHUB_STEP_SUMMARY
          echo "- 조치: 이슈에 거절 코멘트가 추가되었습니다" >> $GITHUB_STEP_SUMMARY

      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const {owner, repo} = context.repo;
            const issue_number = context.payload.issue.number;

            // 1) 거절 코멘트
            await github.rest.issues.createComment({
              owner, repo, issue_number,
              body: `## Terraform Apply 거절됨 ❌

              팀장님이 배포 요청을 반려했습니다.  
              이슈 내용을 수정한 뒤 **'resource_group' 라벨을 다시 달아** 재요청해 주세요.`
            });

            // 2) 기존 resource_group 라벨 제거
            try {
              await github.rest.issues.removeLabel({
                owner, repo, issue_number,
                name: 'resource_group'
              });
            } catch (e) {
              // 이미 없을 수도 있으므로 무시
            }

            // 3) 상태 표시용 라벨 추가(선택)
            await github.rest.issues.addLabels({
              owner, repo, issue_number,
              labels: ['deployment-rejected']
            });

  cleanup-artifacts:
    needs: [terraform-plan, handle-rejection]
    if: >
      always() &&
      needs.terraform-plan.result != 'skipped' 
    runs-on: ubuntu-latest

    # 🟢 아티팩트 삭제용 API 호출 권한
    permissions:
      actions: write

    steps:
      - name: Update Summary for Cleanup
        run: |
          echo "## 아티팩트 정리" >> $GITHUB_STEP_SUMMARY
          echo "- 작업: terraform-plan 아티팩트 정리" >> $GITHUB_STEP_SUMMARY
          echo "- 상태: 진행 중..." >> $GITHUB_STEP_SUMMARY

      - name: List available artifacts
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            
            console.log('Available artifacts:');
            for (const artifact of artifacts.data.artifacts) {
              console.log(`- ${artifact.name} (ID: ${artifact.id})`);
            }
            
      - name: Delete terraform-plan artifact
        id: delete-artifact
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            
            const matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name === "terraform-plan"
            })[0];
            
            let deleteStatus = "❌ 아티팩트를 찾을 수 없음";
            
            if (matchArtifact) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: matchArtifact.id
              });
              console.log(`Successfully deleted artifact: terraform-plan (ID: ${matchArtifact.id})`);
              deleteStatus = "✅ 성공적으로 삭제됨";
            } else {
              console.log('No terraform-plan artifact found');
            }
            
            // 요약 업데이트
            const fs = require('fs');
            fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, `- terraform-plan: **${deleteStatus}**\n`);
            
      - name: Final Workflow Summary
        run: |
          echo "## 워크플로우 완료" >> $GITHUB_STEP_SUMMARY
          echo "- 전체 상태: ✅ 워크플로우 완료" >> $GITHUB_STEP_SUMMARY
          echo "- 실행 시간: $(date)" >> $GITHUB_STEP_SUMMARY