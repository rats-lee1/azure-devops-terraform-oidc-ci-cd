name: 'Resource Group Issue Workflow'

on:
  issues:
    types: [labeled]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  issues: write

jobs:
  check-label-and-extract-resource-group:
    runs-on: ubuntu-latest
    # 라벨 이벤트인 경우 'resource_group' 라벨이 있을 때만 실행
    if: github.event.label.name == 'resource_group' || contains(github.event.issue.labels.*.name, 'resource_group')
    outputs:
      resource_group: ${{ steps.get-resource-group.outputs.resource_group }}
    steps:
      - name: Check for Resource Group Label
        id: check-label
        run: |
          # 이슈에 'resource group' 라벨이 있는지 확인
          IS_LABELED=false
          
          # 이벤트 유형 확인
          if [ "${{ github.event_name }}" = "issues" ] && [ "${{ github.event.action }}" = "labeled" ]; then
            # 라벨 이벤트인 경우
            LABEL="${{ github.event.label.name }}"
            if [ "$LABEL" = "resource_group" ]; then
              IS_LABELED=true
            fi
          else
            # 이슈 오픈 이벤트인 경우 라벨 목록 확인
            LABELS="${{ toJSON(github.event.issue.labels) }}"
            if [[ $LABELS == *"resource_group"* ]]; then
              IS_LABELED=true
            fi
          fi
          
          if [ "$IS_LABELED" = "false" ]; then
            echo "❌ This workflow only runs with the 'resource_group' label."
            exit 1
          fi
          
          echo "✅ Resource Group label detected."
      
      - name: Extract Resource Group from Issue (Issue Forms)
        id: get-resource-group
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.issue.number;
            const repo = context.repo;
            
            // 이슈 상세 정보 가져오기
            const issue = await github.rest.issues.get({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: issue_number
            });
            
            let resourceGroup = null;
            const issueBody = issue.data.body;
            
            // GitHub Issue Forms 형식(structured forms) 파싱
            // 이슈 템플릿의 input field "id: resource-group-name"과 "label: 리소스_그룹명" 찾기
            if (issueBody) {
              // 방법 1: label로 찾기
              const rgLabelMatch = issueBody.match(/###\s+리소스_그룹명\s*([\s\S]*?)(?=###|$)/);
              if (rgLabelMatch && rgLabelMatch[1]) {
                resourceGroup = rgLabelMatch[1].trim();
              }
              
              // 방법 2: 여러 가능한 형식 고려하기
              if (!resourceGroup) {
                const possiblePatterns = [
                  /###\s+리소스_그룹명\s*([\s\S]*?)(?=###|$)/,
                  /리소스_그룹명:?\s*([a-zA-Z0-9_-]+)/i,
                  /리소스\s+그룹:?\s*([a-zA-Z0-9_-]+)/i,
                  /resource\s+group:?\s*([a-zA-Z0-9_-]+)/i,
                  /배포할\s+리소스\s+그룹의\s+이름.*\n\s*([a-zA-Z0-9_-]+)/i
                ];
                
                for (const pattern of possiblePatterns) {
                  const match = issueBody.match(pattern);
                  if (match && match[1]) {
                    resourceGroup = match[1].trim();
                    break;
                  }
                }
              }
            }
            
            if (!resourceGroup) {
              console.log('❌ Resource Group name not found in the issue body using standard patterns');
              
              // 마지막 시도: 이슈 본문에서 가능한 리소스 그룹명 찾기
              const lines = issueBody.split('\n');
              for (let i = 0; i < lines.length; i++) {
                const line = lines[i].trim();
                // 알파벳, 숫자, 하이픈, 언더스코어로 구성된 가능한 리소스 그룹명 패턴
                const rgNamePattern = /^[a-zA-Z0-9][a-zA-Z0-9_-]{2,62}$/;
                
                if (rgNamePattern.test(line) && line.indexOf(' ') === -1) {
                  // 공백 없는 적합한 명명 규칙을 가진 줄이 있을 경우
                  resourceGroup = line;
                  console.log(`✅ Found potential resource group name: ${resourceGroup}`);
                  break;
                }
              }
            }
            
            if (!resourceGroup) {
              core.setFailed('Resource Group name not found in the issue body');
              return;
            }
            
            console.log(`✅ Resource Group name: ${resourceGroup}`);
            core.setOutput('resource_group', resourceGroup);

  terraform-plan:
    needs: check-label-and-extract-resource-group
    runs-on: ubuntu-latest
    
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_resource_group_name: ${{ needs.check-label-and-extract-resource-group.outputs.resource_group }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: 'Check if secrets are set'
        run: |
          if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ]; then
            echo "❌ AZURE_CLIENT_ID is missing"
            exit 1
          fi
          if [ -z "${{ secrets.AZURE_TENANT_ID }}" ]; then
            echo "❌ AZURE_TENANT_ID is missing"
            exit 1
          fi
          if [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then
            echo "❌ AZURE_SUBSCRIPTION_ID is missing"
            exit 1
          fi
          echo "✅ All secrets are set"
      
      - name: 'Az CLI login with OIDC'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -var="resource_group_name=${TF_VAR_resource_group_name}" -out=tfplan
      
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: tfplan
          retention-days: 1
      
      - name: Post Plan Result to Issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.issue.number;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: `## Terraform Plan 완료 ✅
              
              리소스 그룹: \`${{ needs.check-label-and-extract-resource-group.outputs.resource_group }}\`
              
              Plan이 완료되었습니다. 팀장님의 승인 후 Apply가 진행됩니다.`
            });

  terraform-apply:
    needs: [check-label-and-extract-resource-group, terraform-plan]
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: ${{ github.server_url }}/${{ github.repository }}/issues/${{ github.event.issue.number }}
    outputs:
      approval_status: ${{ steps.get_approval_status.outputs.status }}
      started: ${{ steps.mark-start.outputs.started }}
      
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_resource_group_name: ${{ needs.check-label-and-extract-resource-group.outputs.resource_group }}
    
    steps:
      - name: Get Approval Status
        id: get_approval_status
        run: |
          # 환경 보호 검토 상태 확인
          # GitHub Actions에서는 이 값을 직접 얻을 수 없으므로, 그냥 성공했다고 가정
          # 실제로는 워크플로우가 여기까지 진행되면 승인된 것임
          echo "status=approved" >> $GITHUB_OUTPUT

      - name: Mark job started
        id: mark-start
        run: echo "started=true" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
      
      - name: 'Az CLI login with OIDC'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
      
      - name: Post Apply Result to Issue
        if: ${{ success() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.issue.number;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: `## Terraform Apply 완료 ✅
              
              리소스 그룹: \`${{ needs.check-label-and-extract-resource-group.outputs.resource_group }}\` 
              인프라 배포가 완료되었습니다.`
            });

  handle-rejection:
    needs: terraform-apply
    # 수정된 조건: terraform-apply가 완료되기 전에 실패하거나 취소된 경우에만 실행
    if: >
      always() && 
      (needs.terraform-apply.result == 'failure' || 
       needs.terraform-apply.result == 'cancelled' || 
       needs.terraform-apply.result == 'skipped') && 
      needs.terraform-apply.outputs.started != 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const {owner, repo} = context.repo;
            const issue_number = context.payload.issue.number;

            // 1) 거절 코멘트
            await github.rest.issues.createComment({
              owner, repo, issue_number,
              body: `## Terraform Apply 거절됨 ❌

              팀장님이 배포 요청을 반려했습니다.  
              이슈 내용을 수정한 뒤 **'resource_group' 라벨을 다시 달아** 재요청해 주세요.`
            });

            // 2) 기존 resource_group 라벨 제거
            try {
              await github.rest.issues.removeLabel({
                owner, repo, issue_number,
                name: 'resource_group'
              });
            } catch (e) {
              // 이미 없을 수도 있으므로 무시
            }

            // 3) 상태 표시용 라벨 추가(선택)
            await github.rest.issues.addLabels({
              owner, repo, issue_number,
              labels: ['deployment-rejected']
            });

  cleanup-artifacts:
    needs: [terraform-plan, handle-rejection]
    # terraform-plan 이 실제로 성공했을 때만 실행
    if: always() && needs.terraform-plan.result == 'success'
    runs-on: ubuntu-latest

    # 🟢 아티팩트 삭제용 API 호출 권한
    permissions:
      actions: write

    steps:
      - name: Remove Terraform Plan Artifact
        uses: geekyeggo/delete-artifact@v2
        with:
          name: terraform-plan
          failOnError: false   # 이름 불일치 시에도 워크플로 실패로 만들지 않음