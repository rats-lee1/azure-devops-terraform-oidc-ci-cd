name: Issue POC Label Extractor

on:
  issues:
    types: [opened, edited, labeled, unlabeled]

permissions:
  contents: read
  issues: write

jobs:
  extract-poc-label:
    runs-on: ubuntu-latest
    steps:
      - name: Extract POC from Labels
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log(`이슈 #${context.payload.issue.number} 처리 중 (${context.repo.owner}/${context.repo.repo})`);
            
            try {
              // 이슈 정보 가져오기
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number
              });
              
              console.log(`이슈 제목: ${issue.data.title}`);
              
              // 이슈 라벨 확인
              const labels = issue.data.labels || [];
              console.log(`이슈에 총 ${labels.length}개의 라벨이 있습니다.`);
              
              // POC 라벨 찾기 (POC: 로 시작하는 라벨)
              const pocLabels = labels.filter(label => {
                const labelName = label.name || '';
                return labelName.startsWith('POC:');
              });
              
              console.log(`${pocLabels.length}개의 POC 라벨이 발견되었습니다.`);
              
              if (pocLabels.length > 0) {
                // POC 라벨 정보 추출
                const pocInfo = pocLabels.map(label => {
                  const labelName = label.name;
                  const pocName = labelName.substring(4).trim(); // "POC:" 부분 제거
                  return {
                    fullLabel: labelName,
                    pocName: pocName,
                    color: label.color
                  };
                });
                
                console.log('발견된 POC 정보:', JSON.stringify(pocInfo, null, 2));
                
                // 이슈에 POC 정보 코멘트 추가
                let comment = '### 이 이슈에 연결된 POC 정보:\n\n';
                
                pocInfo.forEach(poc => {
                  comment += `- **${poc.pocName}** (라벨: \`${poc.fullLabel}\`)\n`;
                });
                
                // 기존 코멘트가 있는지 확인
                const comments = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.issue.number
                });
                
                // 같은 봇이 작성한 기존 POC 정보 코멘트 찾기
                const botComments = comments.data.filter(comment => {
                  return comment.user.type === 'Bot' && 
                         comment.body.includes('이 이슈에 연결된 POC 정보:');
                });
                
                if (botComments.length > 0) {
                  // 기존 코멘트 업데이트
                  await github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: botComments[0].id,
                    body: comment
                  });
                  console.log('기존 POC 정보 코멘트가 업데이트되었습니다.');
                } else {
                  // 새 코멘트 작성
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.payload.issue.number,
                    body: comment
                  });
                  console.log('POC 정보 코멘트가 추가되었습니다.');
                }
              } else {
                console.log('이 이슈에는 POC 라벨이 없습니다.');
                
                // 기존 코멘트가 있는지 확인하고 제거
                const comments = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.issue.number
                });
                
                // 같은 봇이 작성한 기존 POC 정보 코멘트 찾기
                const botComments = comments.data.filter(comment => {
                  return comment.user.type === 'Bot' && 
                         comment.body.includes('이 이슈에 연결된 POC 정보:');
                });
                
                // 기존 코멘트가 있으면 제거
                if (botComments.length > 0) {
                  await github.rest.issues.deleteComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: botComments[0].id
                  });
                  console.log('기존 POC 정보 코멘트가 제거되었습니다.');
                }
              }
              
            } catch (error) {
              console.error('오류 발생:', error.message);
              
              // 오류 정보를 이슈에 코멘트로 추가
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.issue.number,
                  body: `### POC 라벨 추출 중 오류 발생\n\n\`\`\`\n${error.message}\n\`\`\``
                });
              } catch (commentError) {
                console.error('코멘트 추가 중 추가 오류 발생:', commentError.message);
              }
            }