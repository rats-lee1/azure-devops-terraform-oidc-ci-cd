name: 'Azure Resource Group Apply'

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: '처리할 이슈 번호'
        required: true
        type: number

permissions:
  id-token: write
  contents: read
  issues: write
  actions: write

jobs:
  # Apply 사전 검증 작업
  Pre-Check:
    runs-on: ubuntu-latest
    outputs:
      resource_group: ${{ steps.get-resource-group.outputs.resource_group }}
      resource_group_exists: ${{ steps.check-resource-group-exists.outputs.exists }}
      project_name: ${{ steps.extract-project-info.outputs.project_name }}
    
    steps:
      - name: Get Issue Number
        id: get-issue-number
        run: |
          ISSUE_NUMBER="${{ github.event.inputs.issue_number }}"
          echo "이슈 번호: ${ISSUE_NUMBER}"
          echo "issue_number=${ISSUE_NUMBER}" >> $GITHUB_OUTPUT
    
      - name: Get Issue Details
        uses: actions/github-script@v6
        id: get-issue-details
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ github.event.inputs.issue_number }};
            console.log(`이슈 번호: ${issue_number}`);
            
            try {
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number
              });
              
              console.log(`이슈 제목: ${issue.data.title}`);
              console.log(`이슈 본문 길이: ${issue.data.body ? issue.data.body.length : 0}`);
              
              return {
                title: issue.data.title,
                body: issue.data.body || ""
              };
            } catch (error) {
              console.error(`이슈 가져오기 실패: ${error.message}`);
              core.setFailed(`이슈 가져오기 실패: ${error.message}`);
            }
    
      - name: Call Pre-Check Workflow
        uses: ./.github/workflows/Pre-Check.yml
        with:
          issue_number: ${{ github.event.inputs.issue_number }}
        secrets:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  terraform-plan:
    needs: Pre-Check
    runs-on: ubuntu-latest
    # 리소스 그룹이 존재하지 않는 경우에만 진행
    if: needs.Pre-Check.outputs.resource_group_exists == 'false'
    
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_resource_group_name: ${{ needs.Pre-Check.outputs.resource_group }}
      PROJECT_NAME: ${{ needs.Pre-Check.outputs.project_name }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: 'Check if secrets are set'
        id: check-secrets
        run: |
          SECRETS_STATUS="✅ 모든 Azure 시크릿이 설정되었습니다."
          
          if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ]; then
            echo "❌ AZURE_CLIENT_ID is missing"
            SECRETS_STATUS="❌ AZURE_CLIENT_ID가 누락되었습니다."
            exit 1
          fi
          if [ -z "${{ secrets.AZURE_TENANT_ID }}" ]; then
            echo "❌ AZURE_TENANT_ID is missing"
            SECRETS_STATUS="❌ AZURE_TENANT_ID가 누락되었습니다."
            exit 1
          fi
          if [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then
            echo "❌ AZURE_SUBSCRIPTION_ID is missing"
            SECRETS_STATUS="❌ AZURE_SUBSCRIPTION_ID가 누락되었습니다."
            exit 1
          fi
          echo "✅ All secrets are set"
          echo "secrets_status=$SECRETS_STATUS" >> $GITHUB_OUTPUT
      
      - name: '프로젝트별 백엔드 구성 생성'
        run: |
          # main.tf에서 백엔드 구성 제거 필요
          # 대신 동적으로 backend.tf 생성
          cat > backend.tf << EOF
          terraform {
            backend "azurerm" {
              resource_group_name  = "terraform-state-rg"
              storage_account_name = "tfstatebithumbdev"
              container_name       = "tfstate"
              key                  = "projects/${PROJECT_NAME}/terraform.tfstate"
            }
          }
          EOF
          
          echo "백엔드 구성 파일 생성 완료 (프로젝트: ${PROJECT_NAME})"
          cat backend.tf
      
      - name: 'Az CLI login with OIDC'
        id: azure-login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      
      - name: Terraform Init
        id: tf-init
        run: |
          terraform init
          echo "## Terraform 초기화" >> $GITHUB_STEP_SUMMARY
          echo "- 상태: ✅ 초기화 완료" >> $GITHUB_STEP_SUMMARY
      
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -var="resource_group_name=${TF_VAR_resource_group_name}" -out=tfplan
          
          # 요약 추가
          echo "## Terraform Plan 결과" >> $GITHUB_STEP_SUMMARY
          echo "- 리소스 그룹: **${TF_VAR_resource_group_name}**" >> $GITHUB_STEP_SUMMARY
          echo "- 프로젝트: **${PROJECT_NAME}**" >> $GITHUB_STEP_SUMMARY
          echo "- 상태: ✅ Plan 완료" >> $GITHUB_STEP_SUMMARY
      
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: tfplan
          retention-days: 1
      
      - name: Post Plan Result to Issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ github.event.inputs.issue_number }};
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: `## Terraform Plan 완료 ✅
              
              리소스 그룹: \`${{ needs.Pre-Check.outputs.resource_group }}\`
              프로젝트: \`${{ needs.Pre-Check.outputs.project_name }}\`
              
              Plan이 완료되었습니다. 팀장님의 승인 후 Apply가 진행됩니다.`
            });

  terraform-apply:
    needs: [Pre-Check, terraform-plan]
    runs-on: ubuntu-latest
    # 리소스 그룹이 존재하지 않는 경우에만 진행
    if: needs.Pre-Check.outputs.resource_group_exists == 'false'
    environment: 
      name: production
      url: ${{ github.server_url }}/${{ github.repository }}/issues/${{ github.event.inputs.issue_number }}
    outputs:
      approval_status: ${{ steps.get_approval_status.outputs.status }}
      started: ${{ steps.mark-start.outputs.started }}
      
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_resource_group_name: ${{ needs.Pre-Check.outputs.resource_group }}
    
    steps:
      - name: Get Approval Status
        id: get_approval_status
        run: |
          # 환경 보호 검토 상태 확인
          # GitHub Actions에서는 이 값을 직접 얻을 수 없으므로, 그냥 성공했다고 가정
          # 실제로는 워크플로우가 여기까지 진행되면 승인된 것임
          echo "status=approved" >> $GITHUB_OUTPUT
          
          # 요약 추가
          echo "## 승인 정보" >> $GITHUB_STEP_SUMMARY
          echo "- 환경: **production**" >> $GITHUB_STEP_SUMMARY
          echo "- 상태: ✅ 승인됨" >> $GITHUB_STEP_SUMMARY

      - name: Mark job started
        id: mark-start
        run: echo "started=true" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
      
      - name: 'Az CLI login with OIDC'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Apply
        id: apply
        run: |
          terraform apply -auto-approve tfplan
          
          # 요약 시작
          echo "## Terraform Apply 결과" >> $GITHUB_STEP_SUMMARY
          echo "- 리소스 그룹: **${TF_VAR_resource_group_name}**" >> $GITHUB_STEP_SUMMARY
          echo "- 프로젝트: **${{ needs.Pre-Check.outputs.project_name }}**" >> $GITHUB_STEP_SUMMARY
          echo "- 상태: ✅ 성공적으로 배포됨" >> $GITHUB_STEP_SUMMARY
          
          # 리소스 목록 출력 (선택적)
          echo "### 배포된 리소스" >> $GITHUB_STEP_SUMMARY
          terraform state list | while read -r resource; do
            echo "- \`$resource\`" >> $GITHUB_STEP_SUMMARY
          done
      
      - name: Post Apply Result to Issue
        if: ${{ success() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ github.event.inputs.issue_number }};
            const resourceGroupName = "${{ needs.Pre-Check.outputs.resource_group }}";
            const subscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}";
            
            // Azure 포털 링크 생성
            const portalLink = `https://portal.azure.com/#@/resource/subscriptions/${subscriptionId}/resourceGroups/${resourceGroupName}/overview`;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: `## Terraform Apply 완료 ✅
              
              리소스 그룹: \`${resourceGroupName}\`
              프로젝트: \`${{ needs.Pre-Check.outputs.project_name }}\`
              
              인프라 배포가 완료되었습니다.
              
              ### 리소스 그룹 접속
              [Azure 포털에서 리소스 그룹 보기](${portalLink})`
            });

  handle-rejection:
    needs: [Pre-Check, terraform-plan, terraform-apply]
    # 수정된 조건: terraform-apply가 완료되기 전에 실패하거나 취소된 경우에만 실행
    if: >
      always() && 
      needs.Pre-Check.outputs.resource_group_exists == 'false' &&
      needs.terraform-plan.result == 'success' &&
      (needs.terraform-apply.result == 'failure' || 
       needs.terraform-apply.result == 'cancelled' || 
       needs.terraform-apply.result == 'skipped') && 
      needs.terraform-apply.outputs.started != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Update Summary for Rejection
        run: |
          echo "## 배포 거절 정보" >> $GITHUB_STEP_SUMMARY
          echo "- 리소스 그룹: **${{ needs.Pre-Check.outputs.resource_group }}**" >> $GITHUB_STEP_SUMMARY
          echo "- 프로젝트: **${{ needs.Pre-Check.outputs.project_name }}**" >> $GITHUB_STEP_SUMMARY
          echo "- 상태: ❌ 배포 요청이 거절되었습니다" >> $GITHUB_STEP_SUMMARY
          echo "- 조치: 이슈에 거절 코멘트가 추가되었습니다" >> $GITHUB_STEP_SUMMARY

      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const {owner, repo} = context.repo;
            const issue_number = ${{ github.event.inputs.issue_number }};

            // 1) 거절 코멘트
            await github.rest.issues.createComment({
              owner, repo, issue_number,
              body: `## Terraform Apply 거절됨 ❌

              팀장님이 배포 요청을 반려했습니다.  
              이슈 내용을 수정한 뒤 **'resource_group' 라벨을 다시 달아** 재요청해 주세요.`
            });

            // 2) 기존 resource_group 라벨 제거
            try {
              await github.rest.issues.removeLabel({
                owner, repo, issue_number,
                name: 'resource_group'
              });
            } catch (e) {
              // 이미 없을 수도 있으므로 무시
            }

            // 3) 상태 표시용 라벨 추가(선택)
            await github.rest.issues.addLabels({
              owner, repo, issue_number,
              labels: ['Rejected']
            });

  cleanup-artifacts:
    needs: [Pre-Check, terraform-plan, handle-rejection]
    if: >
      always() &&
      needs.terraform-plan.result != 'skipped' 
    runs-on: ubuntu-latest

    # 🟢 아티팩트 삭제용 API 호출 권한
    permissions:
      actions: write

    steps:
      - name: Update Summary for Cleanup
        run: |
          echo "## 아티팩트 정리" >> $GITHUB_STEP_SUMMARY
          echo "- 작업: terraform-plan 아티팩트 정리" >> $GITHUB_STEP_SUMMARY
          echo "- 상태: 진행 중..." >> $GITHUB_STEP_SUMMARY

      - name: List available artifacts
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            
            console.log('Available artifacts:');
            for (const artifact of artifacts.data.artifacts) {
              console.log(`- ${artifact.name} (ID: ${artifact.id})`);
            }
            
      - name: Delete terraform-plan artifact
        id: delete-artifact
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            
            const matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name === "terraform-plan"
            })[0];
            
            let deleteStatus = "❌ 아티팩트를 찾을 수 없음";
            
            if (matchArtifact) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: matchArtifact.id
              });
              console.log(`Successfully deleted artifact: terraform-plan (ID: ${matchArtifact.id})`);
              deleteStatus = "✅ 성공적으로 삭제됨";
            } else {
              console.log('No terraform-plan artifact found');
            }
            
            // 요약 업데이트
            const fs = require('fs');
            fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, `- terraform-plan: **${deleteStatus}**\n`);
            
      - name: Final Workflow Summary
        run: |
          echo "## 워크플로우 완료" >> $GITHUB_STEP_SUMMARY
          echo "- 전체 상태: ✅ 워크플로우 완료" >> $GITHUB_STEP_SUMMARY
          echo "- 실행 시간: $(date)" >> $GITHUB_STEP_SUMMARY