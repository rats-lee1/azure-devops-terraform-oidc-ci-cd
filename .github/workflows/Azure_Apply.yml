name: 'Azure Resource Group Apply'

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: '처리할 이슈 번호'
        required: true
        type: string

permissions:
  id-token: write
  contents: read
  issues: write
  actions: write

jobs:
  # Apply 사전 검증 작업
  Pre-Check:
    uses: ./.github/workflows/Pre-Check.yml
    with:
      issue_number: ${{ github.event.inputs.issue_number }}
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  terraform-plan:
    needs: Pre-Check
    runs-on: ubuntu-latest
    # 리소스 그룹이 존재하지 않는 경우에만 진행
    if: needs.Pre-Check.outputs.resource_group_exists == 'false'
    
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_resource_group_name: ${{ needs.Pre-Check.outputs.resource_group }}
      PROJECT_NAME: ${{ needs.Pre-Check.outputs.project_name }}
      # 사용자 목록과 GPU 크기를 환경 변수로 추가
      TF_VAR_user_list: ${{ needs.Pre-Check.outputs.user_list }}
      TF_VAR_gpu_size: ${{ needs.Pre-Check.outputs.gpu_size }}
      TF_VAR_environment: ${{ needs.Pre-Check.outputs.environment }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: 'Check if secrets are set'
        id: check-secrets
        run: |
          SECRETS_STATUS="✅ 모든 Azure 시크릿이 설정되었습니다."
          
          if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ]; then
            echo "❌ AZURE_CLIENT_ID is missing"
            SECRETS_STATUS="❌ AZURE_CLIENT_ID가 누락되었습니다."
            exit 1
          fi
          if [ -z "${{ secrets.AZURE_TENANT_ID }}" ]; then
            echo "❌ AZURE_TENANT_ID is missing"
            SECRETS_STATUS="❌ AZURE_TENANT_ID가 누락되었습니다."
            exit 1
          fi
          if [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then
            echo "❌ AZURE_SUBSCRIPTION_ID is missing"
            SECRETS_STATUS="❌ AZURE_SUBSCRIPTION_ID가 누락되었습니다."
            exit 1
          fi
          echo "✅ All secrets are set"
          echo "secrets_status=$SECRETS_STATUS" >> $GITHUB_OUTPUT
      
      - name: '프로젝트별 백엔드 구성 생성'
        run: |
          cat > backend.tf << EOF
          terraform {
            backend "azurerm" {
              resource_group_name  = "terraform-state-rg"
              storage_account_name = "tfstatebithumbdev"
              container_name       = "tfstate"
              key                  = "projects/${PROJECT_NAME}/terraform.tfstate"
            }
          }
          EOF
          
          echo "백엔드 구성 파일 생성 완료 (프로젝트: ${PROJECT_NAME})"
          cat backend.tf
      
      - name: '사용자 RBAC 및 GPU 정책 변수 파일 생성'
        run: |
          # terraform.tfvars 파일 생성
          cat > terraform.tfvars << EOF
          resource_group_name = "${TF_VAR_resource_group_name}"
          user_list = ${TF_VAR_user_list}
          gpu_size = "${TF_VAR_gpu_size}"
          environment = "${TF_VAR_environment}"
          EOF
          
          echo "변수 파일 생성 완료:"
          cat terraform.tfvars
      
      - name: 'Az CLI login with OIDC'
        id: azure-login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      
      - name: Terraform Init
        id: tf-init
        run: |
          terraform init
          echo "## Terraform 초기화" >> $GITHUB_STEP_SUMMARY
          echo "- 상태: ✅ 초기화 완료" >> $GITHUB_STEP_SUMMARY
      
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -out=tfplan
          
          # 요약 추가
          echo "## Terraform Plan 결과" >> $GITHUB_STEP_SUMMARY
          echo "- 리소스 그룹: **${TF_VAR_resource_group_name}**" >> $GITHUB_STEP_SUMMARY
          echo "- 프로젝트: **${PROJECT_NAME}**" >> $GITHUB_STEP_SUMMARY
          echo "- GPU 크기: **${TF_VAR_gpu_size}**" >> $GITHUB_STEP_SUMMARY
          echo "- 환경: **${TF_VAR_environment}**" >> $GITHUB_STEP_SUMMARY
          echo "- 상태: ✅ Plan 완료" >> $GITHUB_STEP_SUMMARY
      
      - name: Upload Terraform Files
        uses: actions/upload-artifact@v4
        with:
          name: terraform-files
          path: |
            tfplan
            terraform.tfvars
            modules/
            *.tf
          retention-days: 1
      
      - name: Post Plan Result to Issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ github.event.inputs.issue_number }};
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            // GPU 크기 정보
            const gpuSize = "${{ needs.Pre-Check.outputs.gpu_size }}";
            const gpuInfo = gpuSize !== "해당 없음" ? `GPU 크기: \`${gpuSize}\`` : "GPU 할당: 없음";
            
            github.rest.issues.createComment({
              owner: owner,
              repo: repo,
              issue_number: issue_number,
              body: `## Terraform Plan 완료 ✅
              
              리소스 그룹: \`${{ needs.Pre-Check.outputs.resource_group }}\`
              프로젝트: \`${{ needs.Pre-Check.outputs.project_name }}\`
              ${gpuInfo}
              환경: \`${{ needs.Pre-Check.outputs.environment }}\`
              
              리소스 그룹 생성 및 사용자 RBAC, GPU 정책이 계획되었습니다.
              팀장님의 승인 후 Apply가 진행됩니다.`
            });
            // 2) 기존 라벨 제거
            try {
              // 현재 이슈의 모든 라벨 조회
              const issueData = await github.rest.issues.get({
                owner, repo, issue_number
              });
              
              // 이슈에 달려있는 모든 라벨 제거
              if (issueData.data.labels && issueData.data.labels.length > 0) {
                for (const label of issueData.data.labels) {
                  await github.rest.issues.removeLabel({
                    owner, repo, issue_number,
                    name: label.name
                  });
                }
                console.log("모든 라벨이 제거되었습니다.");
              } else {
                console.log("제거할 라벨이 없습니다.");
              }
            } catch (e) {
              console.log("라벨 제거 중 오류 발생:", e.message);
            }

            // 3) 상태 표시용 라벨 추가(선택)
            await github.rest.issues.addLabels({
              owner, repo, issue_number,
              labels: ['Waiting Review']
            });

  terraform-apply:
    needs: [Pre-Check, terraform-plan]
    runs-on: ubuntu-latest
    # 리소스 그룹이 존재하지 않는 경우에만 진행
    if: needs.Pre-Check.outputs.resource_group_exists == 'false'
    environment: 
      name: production
      url: ${{ github.server_url }}/${{ github.repository }}/issues/${{ github.event.inputs.issue_number }}
    outputs:
      approval_status: ${{ steps.get_approval_status.outputs.status }}
      started: ${{ steps.mark-start.outputs.started }}
      
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_resource_group_name: ${{ needs.Pre-Check.outputs.resource_group }}
      TF_VAR_user_list: ${{ needs.Pre-Check.outputs.user_list }}
      TF_VAR_gpu_size: ${{ needs.Pre-Check.outputs.gpu_size }}
      TF_VAR_environment: ${{ needs.Pre-Check.outputs.environment }}
    
    steps:
      - name: Get Approval Status
        id: get_approval_status
        run: |
          # 환경 보호 검토 상태 확인
          # GitHub Actions에서는 이 값을 직접 얻을 수 없으므로, 그냥 성공했다고 가정
          # 실제로는 워크플로우가 여기까지 진행되면 승인된 것임
          echo "status=approved" >> $GITHUB_OUTPUT
          
          # 요약 추가
          echo "## 승인 정보" >> $GITHUB_STEP_SUMMARY
          echo "- 환경: **production**" >> $GITHUB_STEP_SUMMARY
          echo "- 상태: ✅ 승인됨" >> $GITHUB_STEP_SUMMARY

      - name: Approval Message to Issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ github.event.inputs.issue_number }};
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            github.rest.issues.createComment({
              owner: owner,
              repo: repo,
              issue_number: issue_number,
              body: `## 승인 완료 ✅

              팀장님께서 승인하셨습니다. 인프라 프로비저닝을 수행합니다.`
            });
            // 2) 기존 라벨 제거
            try {
              // 현재 이슈의 모든 라벨 조회
              const issueData = await github.rest.issues.get({
                owner, repo, issue_number
              });
              
              // 이슈에 달려있는 모든 라벨 제거
              if (issueData.data.labels && issueData.data.labels.length > 0) {
                for (const label of issueData.data.labels) {
                  await github.rest.issues.removeLabel({
                    owner, repo, issue_number,
                    name: label.name
                  });
                }
                console.log("모든 라벨이 제거되었습니다.");
              } else {
                console.log("제거할 라벨이 없습니다.");
              }
            } catch (e) {
              console.log("라벨 제거 중 오류 발생:", e.message);
            }

            // 3) 상태 표시용 라벨 추가(선택)
            await github.rest.issues.addLabels({
              owner, repo, issue_number,
              labels: ['Approved-Deploy']
            });

      - name: Mark job started
        id: mark-start
        run: echo "started=true" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
      
      - name: 'Azure CLI 로그인 (OIDC)'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: 'Terraform 설정'
        uses: hashicorp/setup-terraform@v2
      
      - name: Download Terraform Files
        uses: actions/download-artifact@v4
        with:
          name: terraform-files

      - name: '백엔드 구성 파일 생성'
        run: |
          # backend.tf 파일 생성
          cat > backend.tf << EOF
          terraform {
            backend "azurerm" {
              resource_group_name  = "terraform-state-rg"
              storage_account_name = "tfstatebithumbdev"
              container_name       = "tfstate"
              key                  = "projects/${{ needs.Pre-Check.outputs.project_name }}/terraform.tfstate"
            }
          }
          EOF

          # terraform.tfvars 파일 내용 확인
          echo "다운로드된 terraform.tfvars 파일 내용:"
          cat terraform.tfvars
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Apply
        id: apply
        run: |
          terraform apply -auto-approve tfplan
          
          # 요약 시작
          echo "## Terraform Apply 결과" >> $GITHUB_STEP_SUMMARY
          echo "- 리소스 그룹: **${TF_VAR_resource_group_name}**" >> $GITHUB_STEP_SUMMARY
          echo "- 프로젝트: **${{ needs.Pre-Check.outputs.project_name }}**" >> $GITHUB_STEP_SUMMARY
          echo "- GPU 크기: **${TF_VAR_gpu_size}**" >> $GITHUB_STEP_SUMMARY
          echo "- 환경: **${TF_VAR_environment}**" >> $GITHUB_STEP_SUMMARY
          echo "- 상태: ✅ 성공적으로 배포됨" >> $GITHUB_STEP_SUMMARY
          
          # 사용자 RBAC 정보 출력
          echo "### 접근 권한 배포 (RBAC)" >> $GITHUB_STEP_SUMMARY
          echo "- 권한을 받은 사용자: $(terraform output -json assigned_users)" >> $GITHUB_STEP_SUMMARY
          
          # GPU 할당량 정보 출력
          echo "### GPU 할당량 정책" >> $GITHUB_STEP_SUMMARY
          echo "- 할당된 GPU 수: $(terraform output -raw gpu_quota)" >> $GITHUB_STEP_SUMMARY
          
          # 배포된 리소스 목록 출력
          echo "### 배포된 리소스" >> $GITHUB_STEP_SUMMARY
          terraform state list | while read -r resource; do
            echo "- \`$resource\`" >> $GITHUB_STEP_SUMMARY
          done
      
      - name: Post Apply Result to Issue
        if: ${{ success() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ github.event.inputs.issue_number }};
            const resourceGroupName = "${{ needs.Pre-Check.outputs.resource_group }}";
            const subscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}";
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // Azure 포털 링크 생성
            const portalLink = `https://portal.azure.com/#@/resource/subscriptions/${subscriptionId}/resourceGroups/${resourceGroupName}/overview`;
            
            // GPU 크기 정보
            const gpuSize = "${{ needs.Pre-Check.outputs.gpu_size }}";
            const gpuInfo = gpuSize !== "해당 없음" ? `- GPU 할당량: \`${gpuSize}\`` : "- GPU 할당: 없음";
            
            // 1. 이슈에 코멘트 추가
            await github.rest.issues.createComment({
              owner: owner,
              repo: repo,
              issue_number: issue_number,
              body: `## Terraform Apply 완료 ✅
              
              리소스 그룹: \`${resourceGroupName}\`
              프로젝트: \`${{ needs.Pre-Check.outputs.project_name }}\`
              ${gpuInfo}
              환경: \`${{ needs.Pre-Check.outputs.environment }}\`
              
              ### 배포 내용:
              - 리소스 그룹 생성 완료
              - 사용자 RBAC 권한 설정 완료
              - GPU 할당량 정책 설정 완료
              
              ### 리소스 그룹 접속
              [Azure 포털에서 리소스 그룹 보기](${portalLink})`
            });
            
            // 2. 모든 라벨 제거
            try {
              // 현재 이슈의 모든 라벨 조회
              const issueData = await github.rest.issues.get({
                owner, repo, issue_number
              });
              
              // 이슈에 달려있는 모든 라벨 제거
              if (issueData.data.labels && issueData.data.labels.length > 0) {
                for (const label of issueData.data.labels) {
                  await github.rest.issues.removeLabel({
                    owner, repo, issue_number,
                    name: label.name
                  });
                }
                console.log("모든 라벨이 제거되었습니다.");
              } else {
                console.log("제거할 라벨이 없습니다.");
              }
              
              // 3. "Completed" 라벨 추가
              await github.rest.issues.addLabels({
                owner, repo, issue_number,
                labels: ['Completed']
              });
              console.log("Completed 라벨이 추가되었습니다.");
              
            } catch (e) {
              console.log("라벨 업데이트 중 오류 발생:", e.message);
            }

  handle-rejection:
    needs: [Pre-Check, terraform-plan, terraform-apply]
    # 수정된 조건: terraform-apply가 완료되기 전에 실패하거나 취소된 경우에만 실행
    if: >
      always() && 
      needs.Pre-Check.outputs.resource_group_exists == 'false' &&
      needs.terraform-plan.result == 'success' &&
      (needs.terraform-apply.result == 'failure' || 
       needs.terraform-apply.result == 'cancelled' || 
       needs.terraform-apply.result == 'skipped') && 
      needs.terraform-apply.outputs.started != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Update Summary for Rejection
        run: |
          echo "## 배포 거절 정보" >> $GITHUB_STEP_SUMMARY
          echo "- 리소스 그룹: **${{ needs.Pre-Check.outputs.resource_group }}**" >> $GITHUB_STEP_SUMMARY
          echo "- 프로젝트: **${{ needs.Pre-Check.outputs.project_name }}**" >> $GITHUB_STEP_SUMMARY
          echo "- 상태: ❌ 배포 요청이 거절되었습니다" >> $GITHUB_STEP_SUMMARY
          echo "- 조치: 이슈에 거절 코멘트가 추가되었습니다" >> $GITHUB_STEP_SUMMARY

      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const {owner, repo} = context.repo;
            const issue_number = ${{ github.event.inputs.issue_number }};

            // 1) 거절 코멘트
            await github.rest.issues.createComment({
              owner, repo, issue_number,
              body: `## Terraform Apply 거절됨 ❌

              팀장님께서 배포 요청을 반려했습니다.`
            });

            // 2) 기존 라벨 제거
            try {
              // 현재 이슈의 모든 라벨 조회
              const issueData = await github.rest.issues.get({
                owner, repo, issue_number
              });
              
              // 이슈에 달려있는 모든 라벨 제거
              if (issueData.data.labels && issueData.data.labels.length > 0) {
                for (const label of issueData.data.labels) {
                  await github.rest.issues.removeLabel({
                    owner, repo, issue_number,
                    name: label.name
                  });
                }
                console.log("모든 라벨이 제거되었습니다.");
              } else {
                console.log("제거할 라벨이 없습니다.");
              }
            } catch (e) {
              console.log("라벨 제거 중 오류 발생:", e.message);
            }

            // 3) 상태 표시용 라벨 추가(선택)
            await github.rest.issues.addLabels({
              owner, repo, issue_number,
              labels: ['Rejected']
            });

  cleanup-artifacts:
    needs: [Pre-Check, terraform-plan, handle-rejection]
    if: >
      always() &&
      needs.terraform-plan.result != 'skipped' 
    runs-on: ubuntu-latest

    # 🟢 아티팩트 삭제용 API 호출 권한
    permissions:
      actions: write

    steps:
      - name: Update Summary for Cleanup
        run: |
          echo "## 아티팩트 정리" >> $GITHUB_STEP_SUMMARY
          echo "- 작업: terraform 관련 아티팩트 정리" >> $GITHUB_STEP_SUMMARY
          echo "- 상태: 진행 중..." >> $GITHUB_STEP_SUMMARY

      - name: List available artifacts
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            
            console.log('Available artifacts:');
            for (const artifact of artifacts.data.artifacts) {
              console.log(`- ${artifact.name} (ID: ${artifact.id})`);
            }
            
      - name: Delete terraform artifacts
        id: delete-artifact
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            
            // 모든 terraform 관련 아티팩트 찾기
            const terraformArtifacts = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name.toLowerCase().includes('terraform');
            });
            
            let deleteStatus = "❌ 아티팩트를 찾을 수 없음";
            let deletedCount = 0;
            
            if (terraformArtifacts.length > 0) {
              for (const artifact of terraformArtifacts) {
                try {
                  await github.rest.actions.deleteArtifact({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    artifact_id: artifact.id
                  });
                  console.log(`Successfully deleted artifact: ${artifact.name} (ID: ${artifact.id})`);
                  deletedCount++;
                } catch (error) {
                  console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
                }
              }
              
              if (deletedCount > 0) {
                deleteStatus = `✅ ${deletedCount}개 아티팩트 성공적으로 삭제됨`;
              }
            } else {
              console.log('No terraform-related artifacts found');
            }
            
            // 요약 업데이트
            const fs = require('fs');
            fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, `- Terraform 아티팩트: **${deleteStatus}**\n`);
            
      - name: Final Workflow Summary
        run: |
          echo "## 워크플로우 완료" >> $GITHUB_STEP_SUMMARY
          echo "- 전체 상태: ✅ 워크플로우 완료" >> $GITHUB_STEP_SUMMARY
          echo "- 실행 시간: $(date)" >> $GITHUB_STEP_SUMMARY