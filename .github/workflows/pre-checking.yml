name: 'Resource Group Pre-checking'

on:
  workflow_call:
    inputs:
      issue_number:
        required: true
        type: number
        description: '이슈 번호'
    outputs:
      resource_group:
        description: '추출된 리소스 그룹 이름'
        value: ${{ jobs.pre-checking.outputs.resource_group }}
      poc_name:
        description: '추출된 POC 이름'
        value: ${{ jobs.pre-checking.outputs.poc_name }}
      has_poc:
        description: 'POC 정보 존재 여부'
        value: ${{ jobs.pre-checking.outputs.has_poc }}
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      GH_TOKEN:
        required: true

jobs:
  pre-checking:
    runs-on: ubuntu-latest

    outputs:
      resource_group: ${{ steps.get-resource-group.outputs.resource_group }}
      poc_name: ${{ steps.extract-poc-info.outputs.poc_name }}
      has_poc: ${{ steps.extract-poc-info.outputs.has_poc }}
      resource_group_exists: ${{ steps.check-resource-group-exists.outputs.exists }}
    
    steps:
      - name: Extract Resource Group from Issue (Issue Forms)
        id: get-resource-group
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            // workflow_call에서 전달받은 issue_number 사용
            const issue_number = ${{ inputs.issue_number }};
            const repo = context.repo;
            
            // 이슈 상세 정보 가져오기
            const issue = await github.rest.issues.get({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: issue_number
            });
            
            let resourceGroup = null;
            const issueBody = issue.data.body;
            
            // 간소화된 리소스 그룹명 추출 로직
            if (issueBody) {
              // 주요 패턴만 검색
              const mainPatterns = [
                /###\s+리소스_그룹명\s*([\s\S]*?)(?=###|$)/,
                /리소스[_\s]그룹명:?\s*([a-zA-Z0-9_-]+)/i,
                /resource\s+group:?\s*([a-zA-Z0-9_-]+)/i
              ];
              
              // 주요 패턴으로 검색
              for (const pattern of mainPatterns) {
                const match = issueBody.match(pattern);
                if (match && match[1]) {
                  resourceGroup = match[1].trim();
                  console.log(`✅ Found resource group name with pattern: ${resourceGroup}`);
                  break;
                }
              }
              
              // 패턴 검색으로 찾지 못한 경우, 리소스 그룹 형식의 줄 찾기
              if (!resourceGroup) {
                const lines = issueBody.split('\n');
                for (const line of lines) {
                  const trimmedLine = line.trim();
                  // 리소스 그룹 명명 규칙에 맞는 줄 찾기 (공백 없고 적절한 문자로 구성)
                  if (/^[a-zA-Z0-9][a-zA-Z0-9_-]{2,62}$/.test(trimmedLine)) {
                    resourceGroup = trimmedLine;
                    console.log(`✅ Found potential resource group name: ${resourceGroup}`);
                    break;
                  }
                }
              }
            }
            
            // 리소스 그룹명 검증
            if (resourceGroup) {
              // Azure 리소스 그룹 명명 규칙 검증
              const validNamePattern = /^[a-zA-Z0-9\-_\.\(\)]+$/;
              if (!validNamePattern.test(resourceGroup)) {
                console.log(`❌ 유효하지 않은 리소스 그룹명: "${resourceGroup}"`);
                console.log('리소스 그룹명은 영문자, 숫자, 대시(-), 밑줄(_), 괄호(), 마침표(.)만 포함할 수 있습니다.');
                
                // 오류를 이슈에 코멘트로 추가
                try {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue_number,
                    body: `### ❌ 유효하지 않은 리소스 그룹명\n\n리소스 그룹명 \`${resourceGroup}\`은(는) Azure 명명 규칙에 맞지 않습니다.\n\n리소스 그룹명은 영문자, 숫자, 대시(-), 밑줄(_), 괄호(), 마침표(.)만 포함할 수 있습니다.\n\n유효한 리소스 그룹명으로 다시 시도해주세요.`
                  });
                  console.log('리소스 그룹명 오류 메시지가 이슈에 코멘트로 추가되었습니다.');
                } catch (commentError) {
                  console.error('코멘트 추가 중 오류 발생:', commentError.message);
                }
                
                core.setFailed(`유효하지 않은 리소스 그룹명: ${resourceGroup}`);
                return;
              }
            }
            
            if (!resourceGroup) {
              core.setFailed('Resource Group name not found in the issue body');
              return;
            }
            
            console.log(`✅ Resource Group name: ${resourceGroup}`);
            core.setOutput('resource_group', resourceGroup);

      - name: Extract POC from Labels
        id: extract-poc-info
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            // workflow_call에서 전달받은 issue_number 사용
            const issue_number = ${{ inputs.issue_number }};
            console.log(`이슈 #${issue_number} POC 정보 추출 중`);
            
            try {
              // 이슈 정보 가져오기
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number
              });
              
              // 이슈 라벨 확인
              const labels = issue.data.labels || [];
              console.log(`이슈에 총 ${labels.length}개의 라벨이 있습니다.`);
              
              // POC 라벨 찾기 (POC: 로 시작하는 라벨)
              const pocLabels = labels.filter(label => {
                const labelName = label.name || '';
                return labelName.startsWith('POC:');
              });
              
              console.log(`${pocLabels.length}개의 POC 라벨이 발견되었습니다.`);
              
              let hasPOC = false;
              let pocName = '';
              
              if (pocLabels.length > 0) {
                // POC 라벨 정보 추출
                const pocInfo = pocLabels.map(label => {
                  const labelName = label.name;
                  const pocName = labelName.substring(4).trim(); // "POC:" 부분 제거
                  return {
                    fullLabel: labelName,
                    pocName: pocName,
                    color: label.color
                  };
                });
                
                console.log('발견된 POC 정보:', JSON.stringify(pocInfo, null, 2));
                
                hasPOC = true;
                pocName = pocInfo[0].pocName; // 첫 번째 POC 이름 사용
              } else {
                console.log('이 이슈에는 POC 라벨이 없습니다.');
                hasPOC = false;
                
                // POC가 없다는 경고 메시지를 이슈에 댓글로 추가 (중복 검사 없이)
                try {
                  const warningMessage = `### ⚠️ 프로젝트 정보 누락\n\n이 이슈에 POC 정보가 없습니다. 적절한 POC 라벨(\`POC:이름\`)을 추가해주세요.`;
                  
                  // 새 경고 코멘트 작성 (중복 검사 제거)
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue_number,
                    body: warningMessage
                  });
                  console.log('POC 정보 누락 경고 메시지가 추가되었습니다.');
                } catch (commentError) {
                  console.error('경고 코멘트 추가 중 오류 발생:', commentError.message);
                }
              }
              
              // 출력 설정
              core.setOutput('has_poc', hasPOC.toString());
              core.setOutput('poc_name', pocName);
              
            } catch (error) {
              console.error('POC 정보 추출 중 오류 발생:', error.message);
              core.setOutput('has_poc', 'false');
              core.setOutput('poc_name', '');
              
              // 오류 정보를 이슈에 코멘트로 추가
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue_number,
                  body: `### ❌ POC 라벨 추출 중 오류 발생\n\n\`\`\`\n${error.message}\n\`\`\``
                });
                console.log('오류 정보가 이슈에 코멘트로 추가되었습니다.');
              } catch (commentError) {
                console.error('코멘트 추가 중 추가 오류 발생:', commentError.message);
              }
            }
      
      - name: 'Az CLI login with OIDC'
        id: azure-login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Check if Resource Group already exists
        id: check-resource-group-exists
        if: steps.get-resource-group.outputs.resource_group != ''
        run: |
          RESOURCE_GROUP="${{ steps.get-resource-group.outputs.resource_group }}"
          echo "리소스 그룹 '${RESOURCE_GROUP}' 존재 여부 확인 중..."
          
          # Azure CLI를 사용하여 리소스 그룹 존재 여부 확인
          EXISTS=$(az group exists --name "${RESOURCE_GROUP}")
          
          if [ "$EXISTS" = "true" ]; then
            echo "⚠️ 리소스 그룹 '${RESOURCE_GROUP}'이(가) 이미 존재합니다."
            echo "exists=true" >> $GITHUB_OUTPUT
            
            # 기존 리소스 그룹 정보 가져오기
            TAGS=$(az group show --name "${RESOURCE_GROUP}" --query tags -o json)
            LOCATION=$(az group show --name "${RESOURCE_GROUP}" --query location -o tsv)
            
            echo "위치: ${LOCATION}"
            echo "태그: ${TAGS}"
            
            # 이슈에 충돌 경고 코멘트 추가
            ISSUE_NUMBER="${{ inputs.issue_number }}"
            COMMENT_BODY="### ⚠️ 리소스 그룹 충돌 경고

            요청하신 리소스 그룹 \`${RESOURCE_GROUP}\`은(는) 이미 존재합니다.

            **기존 리소스 그룹 정보:**
            - 위치: \`${LOCATION}\`

            다른 리소스 그룹 이름을 사용하시거나, 기존 리소스 그룹을 재사용하시려면 이슈를 수정해주세요."
            
            # GitHub CLI가 설치되어 있지 않으면 설치
            if ! command -v gh &> /dev/null; then
              echo "GitHub CLI 설치 중..."
              curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
              sudo apt update
              sudo apt install gh
            fi
            
            # GitHub Token을 사용하여 로그인
            echo "${{ secrets.GH_TOKEN }}" | gh auth login --with-token
            
            # 이슈에 코멘트 추가
            gh issue comment "${ISSUE_NUMBER}" --repo "${{ github.repository }}" --body "${COMMENT_BODY}"
            
          else
            echo "✅ 리소스 그룹 '${RESOURCE_GROUP}'이(가) 존재하지 않습니다. 생성 가능합니다."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Add Resource Group Summary
        run: |
          echo "## 리소스 그룹 및 POC 검증 결과" >> $GITHUB_STEP_SUMMARY
          echo "- 이슈 번호: #${{ inputs.issue_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- 식별된 리소스 그룹: **${{ steps.get-resource-group.outputs.resource_group }}**" >> $GITHUB_STEP_SUMMARY
          echo "- 리소스 그룹 충돌: **${{ steps.check-resource-group-exists.outputs.exists == 'true' && '⚠️ 충돌 있음' || '✅ 충돌 없음' }}**" >> $GITHUB_STEP_SUMMARY
          echo "- POC 정보: **${{ steps.extract-poc-info.outputs.has_poc == 'true' && steps.extract-poc-info.outputs.poc_name || '없음' }}**" >> $GITHUB_STEP_SUMMARY
          echo "- 상태: ✅ 검증 완료" >> $GITHUB_STEP_SUMMARY