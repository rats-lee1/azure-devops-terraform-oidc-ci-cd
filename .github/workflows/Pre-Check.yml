name: 'Resource Group Pre-check'

on:
  workflow_call:
    inputs:
      issue_number:
        required: true
        type: string
        description: '이슈 번호'
    outputs:
      resource_group:
        description: '추출된 리소스 그룹 이름'
        value: ${{ jobs.Pre-Check.outputs.resource_group }}
      project_name:
        description: '프로젝트 이름'
        value: ${{ jobs.Pre-Check.outputs.project_name }}
      resource_group_exists:  
        description: '리소스 그룹 존재 여부'
        value: ${{ jobs.Pre-Check.outputs.resource_group_exists }}
      user_list:
        description: '사용자 목록 (JSON 배열)'
        value: ${{ jobs.Pre-Check.outputs.user_list }}
      gpu_size:
        description: 'GPU 크기'
        value: ${{ jobs.Pre-Check.outputs.gpu_size }}
      environment:
        description: '배포 환경'
        value: ${{ jobs.Pre-Check.outputs.environment }}
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      GH_TOKEN:
        required: true

jobs:
  Pre-Check:
    runs-on: ubuntu-latest

    outputs:
      resource_group: ${{ steps.get-resource-group.outputs.resource_group }}
      resource_group_exists: ${{ steps.check-resource-group-exists.outputs.exists }}
      project_name: ${{ steps.extract-project-info.outputs.project_name }}
      user_list: ${{ steps.extract-additional-info.outputs.user_list }}
      gpu_size: ${{ steps.extract-additional-info.outputs.gpu_size }}
      environment: ${{ steps.extract-additional-info.outputs.environment }}
    
    steps:
      - name: Extract Project Information from Issue
        id: extract-project-info
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            // workflow_call에서 전달받은 issue_number 사용
            const issue_number = "${{ inputs.issue_number }}";
            const repo = context.repo;
            
            // 이슈 상세 정보 가져오기
            const issue = await github.rest.issues.get({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: issue_number
            });
            
            let projectName = null;
            const issueBody = issue.data.body;
            
            // 이슈 본문에서 요청 유형과 프로젝트명 추출
            if (issueBody) {
              // 요청 유형 확인
              const requestTypeMatch = issueBody.match(/### 요청 유형\s*\n\n([^\n]+)/);
              const requestType = requestTypeMatch ? requestTypeMatch[1].trim() : null;
              console.log(`요청 유형: ${requestType}`);
              
              if (requestType === '신규 프로젝트 생성') {
                // 신규 프로젝트 생성인 경우 프로젝트명 필드에서 추출
                const projectNameMatch = issueBody.match(/### 프로젝트명\s*\n\n([^\n]+)/);
                if (projectNameMatch && projectNameMatch[1].trim() !== '') {
                  projectName = projectNameMatch[1].trim();
                  console.log(`✅ 신규 프로젝트명: ${projectName}`);
                } else {
                  console.log('⚠️ 신규 프로젝트 생성이지만 프로젝트명이 입력되지 않았습니다.');
                  
                  // 오류를 이슈에 코멘트로 추가
                  try {
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue_number,
                      body: `### ❌ 프로젝트명 누락\n\n신규 프로젝트 생성을 선택하셨지만 프로젝트명이 입력되지 않았습니다. 프로젝트명을 입력해주세요.`
                    });
                  } catch (commentError) {
                    console.error('코멘트 추가 중 오류 발생:', commentError.message);
                  }
                }
              } else if (requestType === '기존 프로젝트 업데이트') {
                // 기존 프로젝트 업데이트인 경우 기존 프로젝트 선택 필드에서 추출
                const existingProjectMatch = issueBody.match(/### 기존 프로젝트 선택\s*\n\n([^\n]+)/);
                if (existingProjectMatch && existingProjectMatch[1].trim() !== '선택하세요') {
                  projectName = existingProjectMatch[1].trim();
                  console.log(`✅ 기존 프로젝트명: ${projectName}`);
                } else {
                  console.log('⚠️ 기존 프로젝트 업데이트이지만 프로젝트가 선택되지 않았습니다.');
                  
                  // 오류를 이슈에 코멘트로 추가
                  try {
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue_number,
                      body: `### ❌ 프로젝트 선택 누락\n\n기존 프로젝트 업데이트를 선택하셨지만 프로젝트가 선택되지 않았습니다. 기존 프로젝트를 선택해주세요.`
                    });
                  } catch (commentError) {
                    console.error('코멘트 추가 중 오류 발생:', commentError.message);
                  }
                }
              } else {
                console.log('⚠️ 요청 유형을 확인할 수 없습니다.');
              }
            }
            
            if (!projectName) {
              console.log('⚠️ 프로젝트명을 추출할 수 없습니다.');
              core.setFailed('프로젝트명을 찾을 수 없습니다.');
            }
            
            console.log(`프로젝트명: ${projectName}`);
            core.setOutput('project_name', projectName || '');

      - name: Extract Resource Group from Issue (Issue Forms)
        id: get-resource-group
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            // workflow_call에서 전달받은 issue_number 사용
            const issue_number = ${{ inputs.issue_number }};
            const repo = context.repo;
            
            // 이슈 상세 정보 가져오기
            const issue = await github.rest.issues.get({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: issue_number
            });
            
            let resourceGroup = null;
            const issueBody = issue.data.body;
            
            // 새로운 이슈 템플릿 형식에서 리소스 그룹명 추출
            if (issueBody) {
              // 새 이슈 템플릿의 리소스 그룹명 필드 (resource-group-name)
              const resourceGroupMatch = issueBody.match(/### 리소스_그룹명\s*\n\n([^\n]+)/);
              if (resourceGroupMatch && resourceGroupMatch[1].trim() !== '') {
                resourceGroup = resourceGroupMatch[1].trim();
                console.log(`✅ Found resource group name from new template: ${resourceGroup}`);
              } else {
                // 이전 방식 시도 (이전 템플릿 지원을 위해 유지)
                const mainPatterns = [
                  /###\s+리소스_그룹명\s*([\s\S]*?)(?=###|$)/,
                  /리소스[_\s]그룹명:?\s*([a-zA-Z0-9_-]+)/i,
                  /resource\s+group:?\s*([a-zA-Z0-9_-]+)/i
                ];
                
                // 주요 패턴으로 검색
                for (const pattern of mainPatterns) {
                  const match = issueBody.match(pattern);
                  if (match && match[1]) {
                    resourceGroup = match[1].trim();
                    console.log(`✅ Found resource group name with pattern: ${resourceGroup}`);
                    break;
                  }
                }
                
                // 패턴 검색으로 찾지 못한 경우, 리소스 그룹 형식의 줄 찾기
                if (!resourceGroup) {
                  const lines = issueBody.split('\n');
                  for (const line of lines) {
                    const trimmedLine = line.trim();
                    // 리소스 그룹 명명 규칙에 맞는 줄 찾기 (공백 없고 적절한 문자로 구성)
                    if (/^[a-zA-Z0-9][a-zA-Z0-9_-]{2,62}$/.test(trimmedLine)) {
                      resourceGroup = trimmedLine;
                      console.log(`✅ Found potential resource group name: ${resourceGroup}`);
                      break;
                    }
                  }
                }
              }
            }
            
            // 리소스 그룹명 검증
            if (resourceGroup) {
              // Azure 리소스 그룹 명명 규칙 검증
              const validNamePattern = /^[a-zA-Z0-9\-_\.\(\)]+$/;
              if (!validNamePattern.test(resourceGroup)) {
                console.log(`❌ 유효하지 않은 리소스 그룹명: "${resourceGroup}"`);
                console.log('리소스 그룹명은 영문자, 숫자, 대시(-), 밑줄(_), 괄호(), 마침표(.)만 포함할 수 있습니다.');
                
                // 오류를 이슈에 코멘트로 추가
                try {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue_number,
                    body: `### ❌ 유효하지 않은 리소스 그룹명\n\n리소스 그룹명 \`${resourceGroup}\`은(는) Azure 명명 규칙에 맞지 않습니다.\n\n리소스 그룹명은 영문자, 숫자, 대시(-), 밑줄(_), 괄호(), 마침표(.)만 포함할 수 있습니다.\n\n유효한 리소스 그룹명으로 다시 시도해주세요.`
                  });
                  console.log('리소스 그룹명 오류 메시지가 이슈에 코멘트로 추가되었습니다.');
                } catch (commentError) {
                  console.error('코멘트 추가 중 오류 발생:', commentError.message);
                }
                
                core.setFailed(`유효하지 않은 리소스 그룹명: ${resourceGroup}`);
                return;
              }
            }
            
            if (!resourceGroup) {
              core.setFailed('Resource Group name not found in the issue body');
              return;
            }
            
            console.log(`✅ Resource Group name: ${resourceGroup}`);
            core.setOutput('resource_group', resourceGroup);

      - name: Extract Additional Information from Issue
        id: extract-additional-info
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            // workflow_call에서 전달받은 issue_number 사용
            const issue_number = ${{ inputs.issue_number }};
            const repo = context.repo;
            
            // 이슈 상세 정보 가져오기
            const issue = await github.rest.issues.get({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: issue_number
            });
            
            const issueBody = issue.data.body;
            
            // 초기화
            let userList = [];
            let gpuSize = "해당 없음";
            let environment = "개발(Development)";
            
            if (issueBody) {
              // 1. 사용자 목록 추출 및 이메일만 추출
              try {
                const userInfoMatch = issueBody.match(/### 사용자 목록\s*\n\n([\s\S]*?)(?=\n\n###|$)/);
                if (userInfoMatch && userInfoMatch[1].trim() !== '') {
                  const userInfoText = userInfoMatch[1].trim();
                  
                  // 여러 줄로 입력된 경우와 쉼표로 구분된 경우 모두 처리
                  if (userInfoText.includes(',')) {
                    // 쉼표로 구분된 경우
                    userList = userInfoText.split(',').map(user => user.trim()).filter(Boolean);
                  } else {
                    // 줄바꿈으로 구분된 경우
                    userList = userInfoText.split('\n').map(user => user.trim()).filter(Boolean);
                  }
                  
                  // 이메일 주소만 추출
                  emailList = userList.map(user => {
                    // "이름:이메일" 형식에서 이메일 부분만 추출
                    const parts = user.split(':');
                    if (parts.length > 1) {
                      return parts[1].trim(); // 이메일 부분 반환
                    }
                    return user.trim(); // 구분자가 없으면 그대로 반환
                  });
                  
                  console.log(`✅ 사용자 목록 추출 (${userList.length}명): ${userList.join(', ')}`);
                  console.log(`✅ 이메일 목록 추출: ${emailList.join(', ')}`);
                } else {
                  console.log('⚠️ 사용자 목록을 찾을 수 없거나 비어 있습니다.');
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue_number,
                    body: `### ⚠️ 사용자 목록 누락\n\n사용자 목록이 누락되었습니다. 리소스에 접근할 사용자 정보를 입력해주세요.`
                  });
                }
              } catch (error) {
                console.log(`사용자 목록 추출 중 오류: ${error.message}`);
              }
              
              // 2. GPU 크기 추출
              try {
                // GPU 사용 여부 확인
                const gpuRequestMatch = issueBody.match(/### GPU 사용 여부\s*\n\n([^\n]+)/);
                const gpuRequest = gpuRequestMatch ? gpuRequestMatch[1].trim() : null;
                
                if (gpuRequest === '필요함') {
                  // GPU 크기 추출
                  const gpuSizeMatch = issueBody.match(/### GPU 사용 구성\s*\n\n([^\n]+)/);
                  if (gpuSizeMatch && gpuSizeMatch[1].trim() !== '해당 없음') {
                    gpuSize = gpuSizeMatch[1].trim();
                    console.log(`✅ 원본 GPU 크기: ${gpuSize}`);
                    
                    // GPU 크기 문자열에서 숫자만 추출 (괄호 안의 숫자)
                    const gpuNumMatch = gpuSize.match(/\((\d+)\s+GPU/);
                    if (gpuNumMatch && gpuNumMatch[1]) {
                      gpuNumeric = gpuNumMatch[1];
                      console.log(`✅ 추출된 GPU 숫자: ${gpuNumeric}`);
                    } else {
                      console.log('⚠️ GPU 숫자를 추출할 수 없습니다.');
                      gpuNumeric = "0";
                    }
                  } else {
                    console.log('⚠️ GPU 구성이 선택되지 않았습니다.');
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue_number,
                      body: `### ⚠️ GPU 구성 누락\n\nGPU가 필요하다고 선택하셨지만 GPU 구성이 선택되지 않았습니다. GPU 사용 구성을 선택해주세요.`
                    });
                  }
                } else {
                  console.log('✅ GPU 리소스가 필요하지 않습니다.');
                  gpuNumeric = "0";
                }
              } catch (error) {
                console.log(`GPU 정보 추출 중 오류: ${error.message}`);
              }
              
              // 3. 환경 정보 추출
              try {
                const environmentMatch = issueBody.match(/### 환경\s*\n\n([^\n]+)/);
                if (environmentMatch && environmentMatch[1].trim() !== '') {
                  environment = environmentMatch[1].trim();
                  console.log(`✅ 배포 환경: ${environment}`);
                } else {
                  console.log('⚠️ 환경 정보가 지정되지 않았습니다. 기본값(개발)을 사용합니다.');
                }
              } catch (error) {
                console.log(`환경 정보 추출 중 오류: ${error.message}`);
              }
            }
            
            // 사용자 목록을 JSON 배열로 변환 (Terraform 변수로 사용하기 위함)
            const userListJson = JSON.stringify(userList);
            const emailListJson = JSON.stringify(emailList);

            // 결과 출력
            core.setOutput('user_list', emailListJson);
            core.setOutput('gpu_size', gpuNumeric);
            core.setOutput('environment', environment);
            
            console.log(`사용자 목록 JSON: ${userListJson}`);
            console.log(`GPU 크기: ${gpuSize}`);
            console.log(`배포 환경: ${environment}`);
      
      - name: 'Az CLI login with OIDC'
        id: azure-login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Check if Resource Group already exists
        id: check-resource-group-exists
        if: steps.get-resource-group.outputs.resource_group != ''
        run: |
          RESOURCE_GROUP="${{ steps.get-resource-group.outputs.resource_group }}"
          echo "리소스 그룹 '${RESOURCE_GROUP}' 존재 여부 확인 중..."
          
          # Azure CLI를 사용하여 리소스 그룹 존재 여부 확인
          EXISTS=$(az group exists --name "${RESOURCE_GROUP}")
          
          if [ "$EXISTS" = "true" ]; then
            echo "⚠️ 리소스 그룹 '${RESOURCE_GROUP}'이(가) 이미 존재합니다."
            echo "exists=true" >> $GITHUB_OUTPUT
            
            # 기존 리소스 그룹 정보 가져오기
            TAGS=$(az group show --name "${RESOURCE_GROUP}" --query tags -o json)
            LOCATION=$(az group show --name "${RESOURCE_GROUP}" --query location -o tsv)
            
            echo "위치: ${LOCATION}"
            echo "태그: ${TAGS}"
            
            # 이슈에 충돌 경고 코멘트 추가
            ISSUE_NUMBER="${{ inputs.issue_number }}"
            COMMENT_BODY="### ⚠️ 리소스 그룹 충돌 경고

            요청하신 리소스 그룹 \`${RESOURCE_GROUP}\`은(는) 이미 존재합니다.

            **기존 리소스 그룹 정보:**
            - 위치: \`${LOCATION}\`

            다른 리소스 그룹 이름을 사용하시거나, 기존 리소스 그룹을 재사용하시려면 이슈를 수정해주세요."
            
            # GitHub CLI가 설치되어 있지 않으면 설치
            if ! command -v gh &> /dev/null; then
              echo "GitHub CLI 설치 중..."
              curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
              sudo apt update
              sudo apt install gh
            fi
            
            # GitHub Token을 사용하여 로그인
            echo "${{ secrets.GH_TOKEN }}" | gh auth login --with-token
            
            # 이슈에 코멘트 추가
            gh issue comment "${ISSUE_NUMBER}" --repo "${{ github.repository }}" --body "${COMMENT_BODY}"
            
          else
            echo "✅ 리소스 그룹 '${RESOURCE_GROUP}'이(가) 존재하지 않습니다. 생성 가능합니다."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      # 리소스 그룹이 이미 존재하는 경우 기존 라벨 제거 후 'On Hold' 라벨 추가
      - name: Remove Existing Labels and Add On Hold Label If Resource Group Exists
        if: steps.check-resource-group-exists.outputs.exists == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            try {
              const issue_number = ${{ inputs.issue_number }};
              const owner = context.repo.owner;
              const repo = context.repo.repo;
              
              // 1. 현재 이슈에 달린 라벨 정보 가져오기
              const issueInfo = await github.rest.issues.get({
                owner,
                repo,
                issue_number
              });
              
              // 2. 기존 라벨 모두 제거
              const existingLabels = issueInfo.data.labels;
              console.log(`현재 달린 라벨: ${existingLabels.map(label => label.name).join(', ') || '없음'}`);
              
              for (const label of existingLabels) {
                try {
                  await github.rest.issues.removeLabel({
                    owner,
                    repo,
                    issue_number,
                    name: label.name
                  });
                  console.log(`라벨 '${label.name}' 제거됨`);
                } catch (removeError) {
                  console.log(`라벨 '${label.name}' 제거 중 오류: ${removeError.message}`);
                }
              }
              
              // 3. 'On Hold' 라벨 추가
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number,
                labels: ['On Hold']
              });
              console.log('On Hold 라벨이 추가되었습니다.');
              
            } catch (e) {
              console.log('라벨 관리 중 오류 발생:', e.message);
            }

      - name: Add Resource Group Summary
        run: |
          echo "## 리소스 그룹 및 프로젝트 검증 결과" >> $GITHUB_STEP_SUMMARY
          echo "- 이슈 번호: #${{ inputs.issue_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- 프로젝트명: **${{ steps.extract-project-info.outputs.project_name }}**" >> $GITHUB_STEP_SUMMARY
          echo "- 식별된 리소스 그룹: **${{ steps.get-resource-group.outputs.resource_group }}**" >> $GITHUB_STEP_SUMMARY
          echo "- 리소스 그룹 충돌: **${{ steps.check-resource-group-exists.outputs.exists == 'true' && '⚠️ 충돌 있음' || '✅ 충돌 없음' }}**" >> $GITHUB_STEP_SUMMARY
          echo "- 사용자 수: **$(echo '${{ steps.extract-additional-info.outputs.user_list }}' | jq 'length')**" >> $GITHUB_STEP_SUMMARY
          echo "- GPU 크기: **${{ steps.extract-additional-info.outputs.gpu_size }}**" >> $GITHUB_STEP_SUMMARY
          echo "- 배포 환경: **${{ steps.extract-additional-info.outputs.environment }}**" >> $GITHUB_STEP_SUMMARY